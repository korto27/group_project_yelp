{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1>Case Western Reserve University<p>\n",
    "Data Analytics Boot Camp, July 2018 session<p>\n",
    "Project 1<p>\n",
    "<h2>September, 18, 2018<p>    \n",
    "Talemanie Borsay, John McDonald, Aaron Ronay<p>\n",
    "Does a restaurant's price level affect it's rating?<p>\n",
    "<h2>Here we provide a data analysis of Yelp API data from Cleveland restaurants and compare their price level (expensiveness) and star rating to other major cities in Ohio (Columbus, and Cincinnati) and other cities with similar population density (Saint Louis, Portland, and Detroit).<p>\n",
    "h0 = price has no affect on rating.\n",
    "\n",
    "\n",
    "<h1> Motivation & Summary<p>\n",
    "\n",
    "<h2>Define the core message or hypothesis of your project.<p>\n",
    "<h3>Is there a relationship between yelp rating and price point?<p>\n",
    "\n",
    "<h2> Describe the questions you asked, and why you asked them<p>\n",
    "<h3>Is there a relationship between Yelp’s star rating and the price of their food or services? \n",
    "We asked these questions because star rating affects the way that a business is perceived.\n",
    "A higher rating brings with it the assumption that services or products are better or higher quality and with higher quality often comes the assumption or expectation of higher prices.\n",
    "\n",
    "<h2> Describe whether you were able to answer these questions to your satisfaction, and briefly summarize your findings<p>\n",
    "\n",
    "<h3>Through our analysis we found that the relationship between rating and price was not large enough to be significant.<p>\n",
    "We were not completely satisfied with our findings because we our sample size did not include many businesses with a five-star rating.<p>\n",
    "We were not certain if this is because people are reluctant to offer businesses five-star ratings unless they perceive them as perfect, or if our data did not present a diverse enough representation.<p>\n",
    "Our analysis centered on businesses in Cleveland, Ohio and compared that with other major cities in Ohio, like Columbus and Cincinnati, and other cities with similar population density, Saint Louis, Portland, and Detroit.\n",
    "\n",
    "\n",
    "<h1> Questions and Data<p>\n",
    "\n",
    "<h2> Elaborate on the questions you asked, describing what kinds of data you needed to answer them, and where you found it<p>\n",
    "<h3>We all know that a four-star restaurant is usually expensive, high quality and gives good service.<p>\n",
    "It left us wondering if the reviews that everyday people give through Yelp, also mimic this phenomenon.<p>\n",
    "Yelp provides a large dataset that provides price range and reviews, this allowed us to examine if there is a relationship between star rating and price.<p>\n",
    "We collected this data with Yelp’s Fusion API.<p>\n",
    "Our intention was to collect a diverse dataset of at least three thousand businesses in key metropolitan areas.<p>\n",
    "We ran into a roadblock when we realized that Yelp allows you to collect information for fifty businesses per API call.<p>\n",
    "\n",
    "<h1> Data Cleanup & Exploration<p>\n",
    "<h2> Describe the exploration and cleanup process<p>\n",
    "<h3>The exploration process was one of insight and frustration.\n",
    "We found ourselves excited about the information our dataset could provide, as well as its possibilities.<p>\n",
    "We found our dataset quite quickly and were excited and motivated by the amount of data at our disposal. <p>\n",
    "Yelp provides access to a dataset with information for over 188,000 businesses in ten metropolitan areas.<p> \n",
    "However, we soon realized that the dataset was too large for us to easily manipulate, and though the file was a JSON, the structure of the dictionaries made it difficult to draw data from.<p>\n",
    "We then decided to try Yelp’s Fusion API for data collection.\n",
    "We discovered that we could only collect data for fifty businesses per API call.\n",
    "At this rate, we felt that we would not have enough data to make a meaningful analysis.<p>\n",
    "We went back to the large Yelp dataset, hoping that we could turn it into a CSV, create a Data frame with necessary information and build our analysis from there.<p>\n",
    "That too was unsuccessful.<p>\n",
    "Through trial and error, we were able to build a loop, using the Fusion API, which allowed us to collect data from six thousand businesses, one thousand each from Cleveland, Columbus, Cincinnati, Saint Louis, Portland, and Detroit for analysis.<p>\n",
    "\n",
    "<h2> Discuss insights you had while exploring the data that you didn't anticipate<p>\n",
    "<h3> We did not anticipate that the structure of our analysis would render certain chart formats irrelevant.<p>\n",
    "We also expected that the businesses that Yelp had available in its dataset were only restaurants.<p>\n",
    "It was only through close examination that we realized that Yelp’s data offered reviews on a variety of business types.<p>\n",
    "\n",
    "<h2> Discuss any problems that arose after exploring the data, and how you resolved them<p>\n",
    "<h3>Problems that arose when exploring that data, was the realization that “Price”, which was a key variable in our analysis, was listed in inconsistent ways in the dataset, while some businesses did not offer a price variable at all.<p>\n",
    "We resolved that by creating a constant variable for price and eliminating all null values.<p>\n",
    "\n",
    "<h1> Present and discuss interesting figures developed during exploration, ideally with the help of Jupyter Notebook<p>\n",
    "\n",
    "<h1> Data Analysis\n",
    "<h2> Discuss the steps you took to analyze the data and answer each question you asked in your proposal\n",
    "<h2> Present and discuss interesting figures developed during analysis, ideally with the help of Jupyter Notebook\n",
    "\n",
    "<h1> Discussion<p>\n",
    "<h2> Discuss your findings. Did you find what you expected to find? If not, why not? What inferences or general conclusions can you draw from your analysis?<p>\n",
    "<h3>We found that there was not a strong relationship between ratings and price.\n",
    "This was not what we expected to find.<p>\n",
    "We can conclude that there are other factors besides star rating that go into whether a business has high or low prices and having a high star rating, may not cause a business to raise or lower prices.<p>\n",
    "We also find that businesses with low prices consistently had three stars. <p>\n",
    "We also discovered that our dataset did not have very many four and five-star ratings.<p>\n",
    "\n",
    "<h1> Post Mortem<p>\n",
    "<h2> Discuss any difficulties that arose, and how you dealt with them\n",
    "Discuss any additional questions that came up, but which you didn't have time to answer:\n",
    "What would you research next, if you had two more weeks?<p>\n",
    "<h3>Additional questions that came up were if four and five-star ratings influenced price more than any other rating.\n",
    "\n",
    "<h1> Questions\n",
    "<h2>A Open-floor Q&A with the audience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy import stats\n",
    "import requests\n",
    "import json\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from yelpapi import YelpAPI\n",
    "from yelp.client import Client\n",
    "from config import api_key"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [],
   "source": [
    "#API Call\n",
    "my_api_key = api_key\n",
    "client = YelpAPI(my_api_key)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "#loop for CLE dataset\n",
    "offset = [0, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950]\n",
    "yelp_clep = []\n",
    "yelp_cle = []\n",
    "\n",
    "#print(offset[i])\n",
    "for i in range(0, 1000):\n",
    "    response = client.search_query(location=\"Cleveland\", limit=1, offset=i)\n",
    "    yelp_cle.append(response[\"businesses\"][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1000"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(yelp_cle)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>alias</th>\n",
       "      <th>categories</th>\n",
       "      <th>coordinates</th>\n",
       "      <th>display_phone</th>\n",
       "      <th>distance</th>\n",
       "      <th>id</th>\n",
       "      <th>image_url</th>\n",
       "      <th>is_closed</th>\n",
       "      <th>location</th>\n",
       "      <th>name</th>\n",
       "      <th>phone</th>\n",
       "      <th>price</th>\n",
       "      <th>rating</th>\n",
       "      <th>review_count</th>\n",
       "      <th>transactions</th>\n",
       "      <th>url</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>lola-cleveland</td>\n",
       "      <td>[{'alias': 'wine_bars', 'title': 'Wine Bars'},...</td>\n",
       "      <td>{'latitude': 41.49883, 'longitude': -81.69035}</td>\n",
       "      <td>(216) 621-5652</td>\n",
       "      <td>3191.079270</td>\n",
       "      <td>J1RDyyPxhioqm8c_fi4P4Q</td>\n",
       "      <td>https://s3-media1.fl.yelpcdn.com/bphoto/XuGT-E...</td>\n",
       "      <td>False</td>\n",
       "      <td>{'address1': '2058 E 4th St', 'address2': '', ...</td>\n",
       "      <td>Lola</td>\n",
       "      <td>+12166215652</td>\n",
       "      <td>$$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>981</td>\n",
       "      <td>[]</td>\n",
       "      <td>https://www.yelp.com/biz/lola-cleveland?adjust...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>townhall-cleveland-2</td>\n",
       "      <td>[{'alias': 'newamerican', 'title': 'American (...</td>\n",
       "      <td>{'latitude': 41.485492, 'longitude': -81.703914}</td>\n",
       "      <td>(216) 344-9400</td>\n",
       "      <td>2951.385340</td>\n",
       "      <td>LNsZJP6jZ11e0tDljOLPiQ</td>\n",
       "      <td>https://s3-media4.fl.yelpcdn.com/bphoto/ycqFgv...</td>\n",
       "      <td>False</td>\n",
       "      <td>{'address1': '1909 W 25th St', 'address2': '',...</td>\n",
       "      <td>Townhall</td>\n",
       "      <td>+12163449400</td>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>994</td>\n",
       "      <td>[]</td>\n",
       "      <td>https://www.yelp.com/biz/townhall-cleveland-2?...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>l-albatros-cleveland</td>\n",
       "      <td>[{'alias': 'french', 'title': 'French'}]</td>\n",
       "      <td>{'latitude': 41.5117439550152, 'longitude': -8...</td>\n",
       "      <td>(216) 791-7880</td>\n",
       "      <td>6953.412053</td>\n",
       "      <td>SzcCJJmreMlWCsNjupdVAA</td>\n",
       "      <td>https://s3-media4.fl.yelpcdn.com/bphoto/QpVBtp...</td>\n",
       "      <td>False</td>\n",
       "      <td>{'address1': '11401 Bellflower Rd', 'address2'...</td>\n",
       "      <td>L'Albatros</td>\n",
       "      <td>+12167917880</td>\n",
       "      <td>$$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>604</td>\n",
       "      <td>[]</td>\n",
       "      <td>https://www.yelp.com/biz/l-albatros-cleveland?...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>slymans-restaurant-cleveland</td>\n",
       "      <td>[{'alias': 'tradamerican', 'title': 'American ...</td>\n",
       "      <td>{'latitude': 41.51286, 'longitude': -81.67125}</td>\n",
       "      <td>(216) 621-3760</td>\n",
       "      <td>4387.852814</td>\n",
       "      <td>1veVZUawy7IhIc5oDpRRQA</td>\n",
       "      <td>https://s3-media2.fl.yelpcdn.com/bphoto/rz2ST-...</td>\n",
       "      <td>False</td>\n",
       "      <td>{'address1': '3106 Saint Clair Ave NE', 'addre...</td>\n",
       "      <td>Slyman's Restaurant</td>\n",
       "      <td>+12166213760</td>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>417</td>\n",
       "      <td>[]</td>\n",
       "      <td>https://www.yelp.com/biz/slymans-restaurant-cl...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>great-lakes-brewing-company-cleveland-4</td>\n",
       "      <td>[{'alias': 'breweries', 'title': 'Breweries'},...</td>\n",
       "      <td>{'latitude': 41.4844102, 'longitude': -81.7043...</td>\n",
       "      <td>(216) 771-4404</td>\n",
       "      <td>2944.089481</td>\n",
       "      <td>meXjqyhTNLFmknY39y2sMg</td>\n",
       "      <td>https://s3-media1.fl.yelpcdn.com/bphoto/RHNLaz...</td>\n",
       "      <td>False</td>\n",
       "      <td>{'address1': '2516 Market Ave', 'address2': ''...</td>\n",
       "      <td>Great Lakes Brewing Company</td>\n",
       "      <td>+12167714404</td>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>852</td>\n",
       "      <td>[]</td>\n",
       "      <td>https://www.yelp.com/biz/great-lakes-brewing-c...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                     alias  \\\n",
       "0                           lola-cleveland   \n",
       "1                     townhall-cleveland-2   \n",
       "2                     l-albatros-cleveland   \n",
       "3             slymans-restaurant-cleveland   \n",
       "4  great-lakes-brewing-company-cleveland-4   \n",
       "\n",
       "                                          categories  \\\n",
       "0  [{'alias': 'wine_bars', 'title': 'Wine Bars'},...   \n",
       "1  [{'alias': 'newamerican', 'title': 'American (...   \n",
       "2           [{'alias': 'french', 'title': 'French'}]   \n",
       "3  [{'alias': 'tradamerican', 'title': 'American ...   \n",
       "4  [{'alias': 'breweries', 'title': 'Breweries'},...   \n",
       "\n",
       "                                         coordinates   display_phone  \\\n",
       "0     {'latitude': 41.49883, 'longitude': -81.69035}  (216) 621-5652   \n",
       "1   {'latitude': 41.485492, 'longitude': -81.703914}  (216) 344-9400   \n",
       "2  {'latitude': 41.5117439550152, 'longitude': -8...  (216) 791-7880   \n",
       "3     {'latitude': 41.51286, 'longitude': -81.67125}  (216) 621-3760   \n",
       "4  {'latitude': 41.4844102, 'longitude': -81.7043...  (216) 771-4404   \n",
       "\n",
       "      distance                      id  \\\n",
       "0  3191.079270  J1RDyyPxhioqm8c_fi4P4Q   \n",
       "1  2951.385340  LNsZJP6jZ11e0tDljOLPiQ   \n",
       "2  6953.412053  SzcCJJmreMlWCsNjupdVAA   \n",
       "3  4387.852814  1veVZUawy7IhIc5oDpRRQA   \n",
       "4  2944.089481  meXjqyhTNLFmknY39y2sMg   \n",
       "\n",
       "                                           image_url  is_closed  \\\n",
       "0  https://s3-media1.fl.yelpcdn.com/bphoto/XuGT-E...      False   \n",
       "1  https://s3-media4.fl.yelpcdn.com/bphoto/ycqFgv...      False   \n",
       "2  https://s3-media4.fl.yelpcdn.com/bphoto/QpVBtp...      False   \n",
       "3  https://s3-media2.fl.yelpcdn.com/bphoto/rz2ST-...      False   \n",
       "4  https://s3-media1.fl.yelpcdn.com/bphoto/RHNLaz...      False   \n",
       "\n",
       "                                            location  \\\n",
       "0  {'address1': '2058 E 4th St', 'address2': '', ...   \n",
       "1  {'address1': '1909 W 25th St', 'address2': '',...   \n",
       "2  {'address1': '11401 Bellflower Rd', 'address2'...   \n",
       "3  {'address1': '3106 Saint Clair Ave NE', 'addre...   \n",
       "4  {'address1': '2516 Market Ave', 'address2': ''...   \n",
       "\n",
       "                          name         phone price  rating  review_count  \\\n",
       "0                         Lola  +12166215652   $$$     4.0           981   \n",
       "1                     Townhall  +12163449400    $$     4.0           994   \n",
       "2                   L'Albatros  +12167917880   $$$     4.5           604   \n",
       "3          Slyman's Restaurant  +12166213760    $$     4.5           417   \n",
       "4  Great Lakes Brewing Company  +12167714404    $$     4.0           852   \n",
       "\n",
       "  transactions                                                url  \n",
       "0           []  https://www.yelp.com/biz/lola-cleveland?adjust...  \n",
       "1           []  https://www.yelp.com/biz/townhall-cleveland-2?...  \n",
       "2           []  https://www.yelp.com/biz/l-albatros-cleveland?...  \n",
       "3           []  https://www.yelp.com/biz/slymans-restaurant-cl...  \n",
       "4           []  https://www.yelp.com/biz/great-lakes-brewing-c...  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw_cle_df = pd.DataFrame.from_dict(yelp_cle)\n",
    "raw_cle_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "#loop for CBUS dataset\n",
    "yelp_CBUSp = []\n",
    "yelp_CBUS = []\n",
    "#print(offset[i])\n",
    "for i in range(0, 1000):\n",
    "    response = client.search_query(location=\"Columbus, OH\", limit=1, offset=i)\n",
    "    yelp_CBUS.append(response[\"businesses\"][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1000"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(yelp_CBUS)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>alias</th>\n",
       "      <th>categories</th>\n",
       "      <th>coordinates</th>\n",
       "      <th>display_phone</th>\n",
       "      <th>distance</th>\n",
       "      <th>id</th>\n",
       "      <th>image_url</th>\n",
       "      <th>is_closed</th>\n",
       "      <th>location</th>\n",
       "      <th>name</th>\n",
       "      <th>phone</th>\n",
       "      <th>price</th>\n",
       "      <th>rating</th>\n",
       "      <th>review_count</th>\n",
       "      <th>transactions</th>\n",
       "      <th>url</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>brassica-columbus</td>\n",
       "      <td>[{'alias': 'mediterranean', 'title': 'Mediterr...</td>\n",
       "      <td>{'latitude': 39.97638, 'longitude': -83.00294}</td>\n",
       "      <td>(614) 867-5885</td>\n",
       "      <td>3949.431230</td>\n",
       "      <td>V25xzPlcNAtnTi_xzQvr9g</td>\n",
       "      <td>https://s3-media1.fl.yelpcdn.com/bphoto/gLEjES...</td>\n",
       "      <td>False</td>\n",
       "      <td>{'address1': '680 N High St', 'address2': None...</td>\n",
       "      <td>Brassica</td>\n",
       "      <td>+16148675885</td>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>813</td>\n",
       "      <td>[]</td>\n",
       "      <td>https://www.yelp.com/biz/brassica-columbus?adj...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>hot-chicken-takeover-columbus</td>\n",
       "      <td>[{'alias': 'chickenshop', 'title': 'Chicken Sh...</td>\n",
       "      <td>{'latitude': 39.9716091678141, 'longitude': -8...</td>\n",
       "      <td>(614) 800-4538</td>\n",
       "      <td>4476.693631</td>\n",
       "      <td>2qwtLyomP0QHusZvDYMvEw</td>\n",
       "      <td>https://s3-media1.fl.yelpcdn.com/bphoto/rDSx8Z...</td>\n",
       "      <td>False</td>\n",
       "      <td>{'address1': '59 Spruce St', 'address2': None,...</td>\n",
       "      <td>Hot Chicken Takeover</td>\n",
       "      <td>+16148004538</td>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1084</td>\n",
       "      <td>[]</td>\n",
       "      <td>https://www.yelp.com/biz/hot-chicken-takeover-...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>northstar-café-columbus-5</td>\n",
       "      <td>[{'alias': 'newamerican', 'title': 'American (...</td>\n",
       "      <td>{'latitude': 39.98154, 'longitude': -83.0046}</td>\n",
       "      <td>(614) 298-9999</td>\n",
       "      <td>3379.749468</td>\n",
       "      <td>2pNq7ui55i0fVI-jJGjzTw</td>\n",
       "      <td>https://s3-media1.fl.yelpcdn.com/bphoto/CohJbC...</td>\n",
       "      <td>False</td>\n",
       "      <td>{'address1': '951 N High St', 'address2': None...</td>\n",
       "      <td>Northstar Café</td>\n",
       "      <td>+16142989999</td>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>911</td>\n",
       "      <td>[]</td>\n",
       "      <td>https://www.yelp.com/biz/northstar-caf%C3%A9-c...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>fox-in-the-snow-cafe-columbus-2</td>\n",
       "      <td>[{'alias': 'coffee', 'title': 'Coffee &amp; Tea'},...</td>\n",
       "      <td>{'latitude': 39.9841399, 'longitude': -82.99939}</td>\n",
       "      <td></td>\n",
       "      <td>3058.329931</td>\n",
       "      <td>RW2f2G-u4hxJaTMrmtMUHA</td>\n",
       "      <td>https://s3-media2.fl.yelpcdn.com/bphoto/xZvHg_...</td>\n",
       "      <td>False</td>\n",
       "      <td>{'address1': '1031 4th St', 'address2': '', 'a...</td>\n",
       "      <td>Fox In the Snow Cafe</td>\n",
       "      <td></td>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>701</td>\n",
       "      <td>[]</td>\n",
       "      <td>https://www.yelp.com/biz/fox-in-the-snow-cafe-...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>pistacia-vera-columbus</td>\n",
       "      <td>[{'alias': 'bakeries', 'title': 'Bakeries'}, {...</td>\n",
       "      <td>{'latitude': 39.951168, 'longitude': -82.995872}</td>\n",
       "      <td>(614) 220-9070</td>\n",
       "      <td>6731.172091</td>\n",
       "      <td>pfPRIJTqLGfpTBSmnBAaeA</td>\n",
       "      <td>https://s3-media2.fl.yelpcdn.com/bphoto/zHokqD...</td>\n",
       "      <td>False</td>\n",
       "      <td>{'address1': '541 S 3rd St', 'address2': '', '...</td>\n",
       "      <td>Pistacia Vera</td>\n",
       "      <td>+16142209070</td>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>576</td>\n",
       "      <td>[]</td>\n",
       "      <td>https://www.yelp.com/biz/pistacia-vera-columbu...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             alias  \\\n",
       "0                brassica-columbus   \n",
       "1    hot-chicken-takeover-columbus   \n",
       "2        northstar-café-columbus-5   \n",
       "3  fox-in-the-snow-cafe-columbus-2   \n",
       "4           pistacia-vera-columbus   \n",
       "\n",
       "                                          categories  \\\n",
       "0  [{'alias': 'mediterranean', 'title': 'Mediterr...   \n",
       "1  [{'alias': 'chickenshop', 'title': 'Chicken Sh...   \n",
       "2  [{'alias': 'newamerican', 'title': 'American (...   \n",
       "3  [{'alias': 'coffee', 'title': 'Coffee & Tea'},...   \n",
       "4  [{'alias': 'bakeries', 'title': 'Bakeries'}, {...   \n",
       "\n",
       "                                         coordinates   display_phone  \\\n",
       "0     {'latitude': 39.97638, 'longitude': -83.00294}  (614) 867-5885   \n",
       "1  {'latitude': 39.9716091678141, 'longitude': -8...  (614) 800-4538   \n",
       "2      {'latitude': 39.98154, 'longitude': -83.0046}  (614) 298-9999   \n",
       "3   {'latitude': 39.9841399, 'longitude': -82.99939}                   \n",
       "4   {'latitude': 39.951168, 'longitude': -82.995872}  (614) 220-9070   \n",
       "\n",
       "      distance                      id  \\\n",
       "0  3949.431230  V25xzPlcNAtnTi_xzQvr9g   \n",
       "1  4476.693631  2qwtLyomP0QHusZvDYMvEw   \n",
       "2  3379.749468  2pNq7ui55i0fVI-jJGjzTw   \n",
       "3  3058.329931  RW2f2G-u4hxJaTMrmtMUHA   \n",
       "4  6731.172091  pfPRIJTqLGfpTBSmnBAaeA   \n",
       "\n",
       "                                           image_url  is_closed  \\\n",
       "0  https://s3-media1.fl.yelpcdn.com/bphoto/gLEjES...      False   \n",
       "1  https://s3-media1.fl.yelpcdn.com/bphoto/rDSx8Z...      False   \n",
       "2  https://s3-media1.fl.yelpcdn.com/bphoto/CohJbC...      False   \n",
       "3  https://s3-media2.fl.yelpcdn.com/bphoto/xZvHg_...      False   \n",
       "4  https://s3-media2.fl.yelpcdn.com/bphoto/zHokqD...      False   \n",
       "\n",
       "                                            location                  name  \\\n",
       "0  {'address1': '680 N High St', 'address2': None...              Brassica   \n",
       "1  {'address1': '59 Spruce St', 'address2': None,...  Hot Chicken Takeover   \n",
       "2  {'address1': '951 N High St', 'address2': None...        Northstar Café   \n",
       "3  {'address1': '1031 4th St', 'address2': '', 'a...  Fox In the Snow Cafe   \n",
       "4  {'address1': '541 S 3rd St', 'address2': '', '...         Pistacia Vera   \n",
       "\n",
       "          phone price  rating  review_count transactions  \\\n",
       "0  +16148675885    $$     4.5           813           []   \n",
       "1  +16148004538    $$     4.5          1084           []   \n",
       "2  +16142989999    $$     4.5           911           []   \n",
       "3                  $$     4.5           701           []   \n",
       "4  +16142209070    $$     4.5           576           []   \n",
       "\n",
       "                                                 url  \n",
       "0  https://www.yelp.com/biz/brassica-columbus?adj...  \n",
       "1  https://www.yelp.com/biz/hot-chicken-takeover-...  \n",
       "2  https://www.yelp.com/biz/northstar-caf%C3%A9-c...  \n",
       "3  https://www.yelp.com/biz/fox-in-the-snow-cafe-...  \n",
       "4  https://www.yelp.com/biz/pistacia-vera-columbu...  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw_CBUS_df = pd.DataFrame.from_dict(yelp_CBUS)\n",
    "raw_CBUS_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "#loop for CIN dataset\n",
    "yelp_CINp = []\n",
    "yelp_CIN = []\n",
    "#print(offset[i])\n",
    "for i in range(0, 1000):\n",
    "    response = client.search_query(location=\"Cincinnati, OH\", limit=1, offset=i)\n",
    "    yelp_CIN.append(response[\"businesses\"][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1000"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(yelp_CIN)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>alias</th>\n",
       "      <th>categories</th>\n",
       "      <th>coordinates</th>\n",
       "      <th>display_phone</th>\n",
       "      <th>distance</th>\n",
       "      <th>id</th>\n",
       "      <th>image_url</th>\n",
       "      <th>is_closed</th>\n",
       "      <th>location</th>\n",
       "      <th>name</th>\n",
       "      <th>phone</th>\n",
       "      <th>price</th>\n",
       "      <th>rating</th>\n",
       "      <th>review_count</th>\n",
       "      <th>transactions</th>\n",
       "      <th>url</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>the-eagle-cincinnati</td>\n",
       "      <td>[{'alias': 'tradamerican', 'title': 'American ...</td>\n",
       "      <td>{'latitude': 39.110633, 'longitude': -84.515181}</td>\n",
       "      <td>(513) 802-5007</td>\n",
       "      <td>1918.069627</td>\n",
       "      <td>6Fr0gKPwtVkYyUQzkFcm1w</td>\n",
       "      <td>https://s3-media2.fl.yelpcdn.com/bphoto/Unn5iw...</td>\n",
       "      <td>False</td>\n",
       "      <td>{'address1': '1342 Vine St', 'address2': '', '...</td>\n",
       "      <td>The Eagle</td>\n",
       "      <td>+15138025007</td>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1555</td>\n",
       "      <td>[]</td>\n",
       "      <td>https://www.yelp.com/biz/the-eagle-cincinnati?...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>maplewood-kitchen-and-bar-cincinnati</td>\n",
       "      <td>[{'alias': 'breakfast_brunch', 'title': 'Break...</td>\n",
       "      <td>{'latitude': 39.1016201128745, 'longitude': -8...</td>\n",
       "      <td>(513) 421-2100</td>\n",
       "      <td>2874.466436</td>\n",
       "      <td>ZxkE7Badmgf9_V8a9wjvHQ</td>\n",
       "      <td>https://s3-media2.fl.yelpcdn.com/bphoto/7JLlFP...</td>\n",
       "      <td>False</td>\n",
       "      <td>{'address1': '525 Race St', 'address2': '', 'a...</td>\n",
       "      <td>Maplewood Kitchen and Bar</td>\n",
       "      <td>+15134212100</td>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>976</td>\n",
       "      <td>[]</td>\n",
       "      <td>https://www.yelp.com/biz/maplewood-kitchen-and...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>elis-bbq-cincinnati-2</td>\n",
       "      <td>[{'alias': 'bbq', 'title': 'Barbeque'}]</td>\n",
       "      <td>{'latitude': 39.117958, 'longitude': -84.442722}</td>\n",
       "      <td>(513) 533-1957</td>\n",
       "      <td>5615.235864</td>\n",
       "      <td>7iQ4oRJh0zPqWhzndmtwfg</td>\n",
       "      <td>https://s3-media1.fl.yelpcdn.com/bphoto/_T79Gp...</td>\n",
       "      <td>False</td>\n",
       "      <td>{'address1': '3313 Riverside Dr', 'address2': ...</td>\n",
       "      <td>Eli's BBQ</td>\n",
       "      <td>+15135331957</td>\n",
       "      <td>$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1100</td>\n",
       "      <td>[]</td>\n",
       "      <td>https://www.yelp.com/biz/elis-bbq-cincinnati-2...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>sotto-cincinnati</td>\n",
       "      <td>[{'alias': 'italian', 'title': 'Italian'}]</td>\n",
       "      <td>{'latitude': 39.103137, 'longitude': -84.511123}</td>\n",
       "      <td>(513) 977-6886</td>\n",
       "      <td>2644.193590</td>\n",
       "      <td>eNtNh5aS71wFvwqsyV2QMA</td>\n",
       "      <td>https://s3-media1.fl.yelpcdn.com/bphoto/YUBA1r...</td>\n",
       "      <td>False</td>\n",
       "      <td>{'address1': '118 E 6th St', 'address2': '', '...</td>\n",
       "      <td>Sotto</td>\n",
       "      <td>+15139776886</td>\n",
       "      <td>$$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>812</td>\n",
       "      <td>[]</td>\n",
       "      <td>https://www.yelp.com/biz/sotto-cincinnati?adju...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>bakersfield-cincinnati-2</td>\n",
       "      <td>[{'alias': 'bars', 'title': 'Bars'}, {'alias':...</td>\n",
       "      <td>{'latitude': 39.1086926962166, 'longitude': -8...</td>\n",
       "      <td>(513) 579-0446</td>\n",
       "      <td>2121.529704</td>\n",
       "      <td>-kkS5JkihO7uKz9YgZVhzg</td>\n",
       "      <td>https://s3-media2.fl.yelpcdn.com/bphoto/pcxPED...</td>\n",
       "      <td>False</td>\n",
       "      <td>{'address1': '1213 Vine St', 'address2': None,...</td>\n",
       "      <td>Bakersfield</td>\n",
       "      <td>+15135790446</td>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1066</td>\n",
       "      <td>[]</td>\n",
       "      <td>https://www.yelp.com/biz/bakersfield-cincinnat...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                  alias  \\\n",
       "0                  the-eagle-cincinnati   \n",
       "1  maplewood-kitchen-and-bar-cincinnati   \n",
       "2                 elis-bbq-cincinnati-2   \n",
       "3                      sotto-cincinnati   \n",
       "4              bakersfield-cincinnati-2   \n",
       "\n",
       "                                          categories  \\\n",
       "0  [{'alias': 'tradamerican', 'title': 'American ...   \n",
       "1  [{'alias': 'breakfast_brunch', 'title': 'Break...   \n",
       "2            [{'alias': 'bbq', 'title': 'Barbeque'}]   \n",
       "3         [{'alias': 'italian', 'title': 'Italian'}]   \n",
       "4  [{'alias': 'bars', 'title': 'Bars'}, {'alias':...   \n",
       "\n",
       "                                         coordinates   display_phone  \\\n",
       "0   {'latitude': 39.110633, 'longitude': -84.515181}  (513) 802-5007   \n",
       "1  {'latitude': 39.1016201128745, 'longitude': -8...  (513) 421-2100   \n",
       "2   {'latitude': 39.117958, 'longitude': -84.442722}  (513) 533-1957   \n",
       "3   {'latitude': 39.103137, 'longitude': -84.511123}  (513) 977-6886   \n",
       "4  {'latitude': 39.1086926962166, 'longitude': -8...  (513) 579-0446   \n",
       "\n",
       "      distance                      id  \\\n",
       "0  1918.069627  6Fr0gKPwtVkYyUQzkFcm1w   \n",
       "1  2874.466436  ZxkE7Badmgf9_V8a9wjvHQ   \n",
       "2  5615.235864  7iQ4oRJh0zPqWhzndmtwfg   \n",
       "3  2644.193590  eNtNh5aS71wFvwqsyV2QMA   \n",
       "4  2121.529704  -kkS5JkihO7uKz9YgZVhzg   \n",
       "\n",
       "                                           image_url  is_closed  \\\n",
       "0  https://s3-media2.fl.yelpcdn.com/bphoto/Unn5iw...      False   \n",
       "1  https://s3-media2.fl.yelpcdn.com/bphoto/7JLlFP...      False   \n",
       "2  https://s3-media1.fl.yelpcdn.com/bphoto/_T79Gp...      False   \n",
       "3  https://s3-media1.fl.yelpcdn.com/bphoto/YUBA1r...      False   \n",
       "4  https://s3-media2.fl.yelpcdn.com/bphoto/pcxPED...      False   \n",
       "\n",
       "                                            location  \\\n",
       "0  {'address1': '1342 Vine St', 'address2': '', '...   \n",
       "1  {'address1': '525 Race St', 'address2': '', 'a...   \n",
       "2  {'address1': '3313 Riverside Dr', 'address2': ...   \n",
       "3  {'address1': '118 E 6th St', 'address2': '', '...   \n",
       "4  {'address1': '1213 Vine St', 'address2': None,...   \n",
       "\n",
       "                        name         phone price  rating  review_count  \\\n",
       "0                  The Eagle  +15138025007    $$     4.5          1555   \n",
       "1  Maplewood Kitchen and Bar  +15134212100    $$     4.5           976   \n",
       "2                  Eli's BBQ  +15135331957     $     4.5          1100   \n",
       "3                      Sotto  +15139776886   $$$     4.5           812   \n",
       "4                Bakersfield  +15135790446    $$     4.5          1066   \n",
       "\n",
       "  transactions                                                url  \n",
       "0           []  https://www.yelp.com/biz/the-eagle-cincinnati?...  \n",
       "1           []  https://www.yelp.com/biz/maplewood-kitchen-and...  \n",
       "2           []  https://www.yelp.com/biz/elis-bbq-cincinnati-2...  \n",
       "3           []  https://www.yelp.com/biz/sotto-cincinnati?adju...  \n",
       "4           []  https://www.yelp.com/biz/bakersfield-cincinnat...  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw_CIN_df = pd.DataFrame.from_dict(yelp_CIN)\n",
    "raw_CIN_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "#loop for STL dataset\n",
    "yelp_STLp = []\n",
    "yelp_STL = []\n",
    "#print(offset[i])\n",
    "for i in range(0, 1000):\n",
    "    response = client.search_query(location=\"Saint Louis, MO\", limit=1, offset=i)\n",
    "    yelp_STL.append(response[\"businesses\"][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1000"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(yelp_STL)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>alias</th>\n",
       "      <th>categories</th>\n",
       "      <th>coordinates</th>\n",
       "      <th>display_phone</th>\n",
       "      <th>distance</th>\n",
       "      <th>id</th>\n",
       "      <th>image_url</th>\n",
       "      <th>is_closed</th>\n",
       "      <th>location</th>\n",
       "      <th>name</th>\n",
       "      <th>phone</th>\n",
       "      <th>price</th>\n",
       "      <th>rating</th>\n",
       "      <th>review_count</th>\n",
       "      <th>transactions</th>\n",
       "      <th>url</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>pappys-smokehouse-saint-louis-3</td>\n",
       "      <td>[{'alias': 'bbq', 'title': 'Barbeque'}, {'alia...</td>\n",
       "      <td>{'latitude': 38.635146597249, 'longitude': -90...</td>\n",
       "      <td>(314) 535-4340</td>\n",
       "      <td>8826.947371</td>\n",
       "      <td>I_3LMZ_1m2mzR0oLIOePIg</td>\n",
       "      <td>https://s3-media2.fl.yelpcdn.com/bphoto/ZQWKBz...</td>\n",
       "      <td>False</td>\n",
       "      <td>{'address1': '3106 Olive St', 'address2': '', ...</td>\n",
       "      <td>Pappy's Smokehouse</td>\n",
       "      <td>+13145354340</td>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>3232</td>\n",
       "      <td>[]</td>\n",
       "      <td>https://www.yelp.com/biz/pappys-smokehouse-sai...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>blues-city-deli-saint-louis</td>\n",
       "      <td>[{'alias': 'delis', 'title': 'Delis'}]</td>\n",
       "      <td>{'latitude': 38.605057, 'longitude': -90.2184098}</td>\n",
       "      <td>(314) 773-8225</td>\n",
       "      <td>8981.695407</td>\n",
       "      <td>_aKr7POnacW_VizRKBpCiA</td>\n",
       "      <td>https://s3-media4.fl.yelpcdn.com/bphoto/7WS4yV...</td>\n",
       "      <td>False</td>\n",
       "      <td>{'address1': '2438 McNair Ave', 'address2': No...</td>\n",
       "      <td>Blues City Deli</td>\n",
       "      <td>+13147738225</td>\n",
       "      <td>$</td>\n",
       "      <td>5.0</td>\n",
       "      <td>784</td>\n",
       "      <td>[]</td>\n",
       "      <td>https://www.yelp.com/biz/blues-city-deli-saint...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>the-shaved-duck-saint-louis-3</td>\n",
       "      <td>[{'alias': 'soulfood', 'title': 'Soul Food'}, ...</td>\n",
       "      <td>{'latitude': 38.603635, 'longitude': -90.235876}</td>\n",
       "      <td>(314) 776-1407</td>\n",
       "      <td>7490.599223</td>\n",
       "      <td>cQIh4YJlVtZI9TLF5_smOg</td>\n",
       "      <td>https://s3-media1.fl.yelpcdn.com/bphoto/ZW59pg...</td>\n",
       "      <td>False</td>\n",
       "      <td>{'address1': '2900 Virginia Ave', 'address2': ...</td>\n",
       "      <td>The Shaved Duck</td>\n",
       "      <td>+13147761407</td>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1460</td>\n",
       "      <td>[]</td>\n",
       "      <td>https://www.yelp.com/biz/the-shaved-duck-saint...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>broadway-oyster-bar-saint-louis</td>\n",
       "      <td>[{'alias': 'cajun', 'title': 'Cajun/Creole'}, ...</td>\n",
       "      <td>{'latitude': 38.618778, 'longitude': -90.192384}</td>\n",
       "      <td>(314) 621-8811</td>\n",
       "      <td>11227.286845</td>\n",
       "      <td>iRIHK8-EwpeffwvoO4nzIA</td>\n",
       "      <td>https://s3-media3.fl.yelpcdn.com/bphoto/Wz45Fi...</td>\n",
       "      <td>False</td>\n",
       "      <td>{'address1': '736 S Broadway', 'address2': '',...</td>\n",
       "      <td>Broadway Oyster Bar</td>\n",
       "      <td>+13146218811</td>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1327</td>\n",
       "      <td>[delivery, pickup]</td>\n",
       "      <td>https://www.yelp.com/biz/broadway-oyster-bar-s...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>sugarfire-smoke-house-saint-louis-2</td>\n",
       "      <td>[{'alias': 'bbq', 'title': 'Barbeque'}]</td>\n",
       "      <td>{'latitude': 38.673459, 'longitude': -90.367448}</td>\n",
       "      <td>(314) 997-2301</td>\n",
       "      <td>7882.156789</td>\n",
       "      <td>vWjME92WddneF98IqzaNfQ</td>\n",
       "      <td>https://s3-media4.fl.yelpcdn.com/bphoto/nP38lv...</td>\n",
       "      <td>False</td>\n",
       "      <td>{'address1': '9200 Olive Blvd', 'address2': 'S...</td>\n",
       "      <td>Sugarfire Smoke House</td>\n",
       "      <td>+13149972301</td>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1228</td>\n",
       "      <td>[delivery]</td>\n",
       "      <td>https://www.yelp.com/biz/sugarfire-smoke-house...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                 alias  \\\n",
       "0      pappys-smokehouse-saint-louis-3   \n",
       "1          blues-city-deli-saint-louis   \n",
       "2        the-shaved-duck-saint-louis-3   \n",
       "3      broadway-oyster-bar-saint-louis   \n",
       "4  sugarfire-smoke-house-saint-louis-2   \n",
       "\n",
       "                                          categories  \\\n",
       "0  [{'alias': 'bbq', 'title': 'Barbeque'}, {'alia...   \n",
       "1             [{'alias': 'delis', 'title': 'Delis'}]   \n",
       "2  [{'alias': 'soulfood', 'title': 'Soul Food'}, ...   \n",
       "3  [{'alias': 'cajun', 'title': 'Cajun/Creole'}, ...   \n",
       "4            [{'alias': 'bbq', 'title': 'Barbeque'}]   \n",
       "\n",
       "                                         coordinates   display_phone  \\\n",
       "0  {'latitude': 38.635146597249, 'longitude': -90...  (314) 535-4340   \n",
       "1  {'latitude': 38.605057, 'longitude': -90.2184098}  (314) 773-8225   \n",
       "2   {'latitude': 38.603635, 'longitude': -90.235876}  (314) 776-1407   \n",
       "3   {'latitude': 38.618778, 'longitude': -90.192384}  (314) 621-8811   \n",
       "4   {'latitude': 38.673459, 'longitude': -90.367448}  (314) 997-2301   \n",
       "\n",
       "       distance                      id  \\\n",
       "0   8826.947371  I_3LMZ_1m2mzR0oLIOePIg   \n",
       "1   8981.695407  _aKr7POnacW_VizRKBpCiA   \n",
       "2   7490.599223  cQIh4YJlVtZI9TLF5_smOg   \n",
       "3  11227.286845  iRIHK8-EwpeffwvoO4nzIA   \n",
       "4   7882.156789  vWjME92WddneF98IqzaNfQ   \n",
       "\n",
       "                                           image_url  is_closed  \\\n",
       "0  https://s3-media2.fl.yelpcdn.com/bphoto/ZQWKBz...      False   \n",
       "1  https://s3-media4.fl.yelpcdn.com/bphoto/7WS4yV...      False   \n",
       "2  https://s3-media1.fl.yelpcdn.com/bphoto/ZW59pg...      False   \n",
       "3  https://s3-media3.fl.yelpcdn.com/bphoto/Wz45Fi...      False   \n",
       "4  https://s3-media4.fl.yelpcdn.com/bphoto/nP38lv...      False   \n",
       "\n",
       "                                            location                   name  \\\n",
       "0  {'address1': '3106 Olive St', 'address2': '', ...     Pappy's Smokehouse   \n",
       "1  {'address1': '2438 McNair Ave', 'address2': No...        Blues City Deli   \n",
       "2  {'address1': '2900 Virginia Ave', 'address2': ...        The Shaved Duck   \n",
       "3  {'address1': '736 S Broadway', 'address2': '',...    Broadway Oyster Bar   \n",
       "4  {'address1': '9200 Olive Blvd', 'address2': 'S...  Sugarfire Smoke House   \n",
       "\n",
       "          phone price  rating  review_count        transactions  \\\n",
       "0  +13145354340    $$     4.5          3232                  []   \n",
       "1  +13147738225     $     5.0           784                  []   \n",
       "2  +13147761407    $$     4.5          1460                  []   \n",
       "3  +13146218811    $$     4.5          1327  [delivery, pickup]   \n",
       "4  +13149972301    $$     4.5          1228          [delivery]   \n",
       "\n",
       "                                                 url  \n",
       "0  https://www.yelp.com/biz/pappys-smokehouse-sai...  \n",
       "1  https://www.yelp.com/biz/blues-city-deli-saint...  \n",
       "2  https://www.yelp.com/biz/the-shaved-duck-saint...  \n",
       "3  https://www.yelp.com/biz/broadway-oyster-bar-s...  \n",
       "4  https://www.yelp.com/biz/sugarfire-smoke-house...  "
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw_STL_df = pd.DataFrame.from_dict(yelp_STL)\n",
    "raw_STL_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "#request limit reached for the day, had to add a second API key in another config.py file\n",
    "from config2 import api_key"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "#API Call\n",
    "my_api_key = api_key\n",
    "client = YelpAPI(my_api_key)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "#loop for PORT dataset\n",
    "yelp_PORTp = []\n",
    "yelp_PORT = []\n",
    "#print(offset[i])\n",
    "for i in range(0, 1000):\n",
    "    response = client.search_query(location=\"Portland, OR\", limit=1, offset=i)\n",
    "    yelp_PORT.append(response[\"businesses\"][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1000"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(yelp_PORT)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>alias</th>\n",
       "      <th>categories</th>\n",
       "      <th>coordinates</th>\n",
       "      <th>display_phone</th>\n",
       "      <th>distance</th>\n",
       "      <th>id</th>\n",
       "      <th>image_url</th>\n",
       "      <th>is_closed</th>\n",
       "      <th>location</th>\n",
       "      <th>name</th>\n",
       "      <th>phone</th>\n",
       "      <th>price</th>\n",
       "      <th>rating</th>\n",
       "      <th>review_count</th>\n",
       "      <th>transactions</th>\n",
       "      <th>url</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>screen-door-portland</td>\n",
       "      <td>[{'alias': 'southern', 'title': 'Southern'}, {...</td>\n",
       "      <td>{'latitude': 45.52309, 'longitude': -122.64164}</td>\n",
       "      <td>(503) 542-0880</td>\n",
       "      <td>1267.160045</td>\n",
       "      <td>OQ2oHkcWA8KNC1Lsvj1SBA</td>\n",
       "      <td>https://s3-media2.fl.yelpcdn.com/bphoto/yc56V7...</td>\n",
       "      <td>False</td>\n",
       "      <td>{'address1': '2337 E Burnside St', 'address2':...</td>\n",
       "      <td>Screen Door</td>\n",
       "      <td>+15035420880</td>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>5862</td>\n",
       "      <td>[pickup]</td>\n",
       "      <td>https://www.yelp.com/biz/screen-door-portland?...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>salt-and-straw-portland-2</td>\n",
       "      <td>[{'alias': 'icecream', 'title': 'Ice Cream &amp; F...</td>\n",
       "      <td>{'latitude': 45.52893, 'longitude': -122.69827}</td>\n",
       "      <td>(971) 271-8168</td>\n",
       "      <td>3738.689673</td>\n",
       "      <td>o_L9Ss4boqq6ZEF9xeSH6Q</td>\n",
       "      <td>https://s3-media4.fl.yelpcdn.com/bphoto/MzZ5tn...</td>\n",
       "      <td>False</td>\n",
       "      <td>{'address1': '838 NW 23rd Ave', 'address2': ''...</td>\n",
       "      <td>Salt &amp; Straw</td>\n",
       "      <td>+19712718168</td>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>3177</td>\n",
       "      <td>[]</td>\n",
       "      <td>https://www.yelp.com/biz/salt-and-straw-portla...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>tasty-n-alder-portland</td>\n",
       "      <td>[{'alias': 'newamerican', 'title': 'American (...</td>\n",
       "      <td>{'latitude': 45.52134, 'longitude': -122.68334}</td>\n",
       "      <td>(503) 621-9251</td>\n",
       "      <td>2369.690277</td>\n",
       "      <td>FBQp3R_PQIM9eGnkqzmlOw</td>\n",
       "      <td>https://s3-media3.fl.yelpcdn.com/bphoto/e-2Uad...</td>\n",
       "      <td>False</td>\n",
       "      <td>{'address1': '580 SW 12th Ave', 'address2': ''...</td>\n",
       "      <td>Tasty n Alder</td>\n",
       "      <td>+15036219251</td>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>3156</td>\n",
       "      <td>[]</td>\n",
       "      <td>https://www.yelp.com/biz/tasty-n-alder-portlan...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mother-s-bistro-and-bar-portland</td>\n",
       "      <td>[{'alias': 'breakfast_brunch', 'title': 'Break...</td>\n",
       "      <td>{'latitude': 45.5199401129479, 'longitude': -1...</td>\n",
       "      <td>(503) 464-1122</td>\n",
       "      <td>1602.785732</td>\n",
       "      <td>n73rxa6e6-fTIxQzfv4BuA</td>\n",
       "      <td>https://s3-media2.fl.yelpcdn.com/bphoto/LMoNfb...</td>\n",
       "      <td>False</td>\n",
       "      <td>{'address1': '212 SW Stark St', 'address2': ''...</td>\n",
       "      <td>Mother’s Bistro &amp; Bar</td>\n",
       "      <td>+15034641122</td>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>3638</td>\n",
       "      <td>[]</td>\n",
       "      <td>https://www.yelp.com/biz/mother-s-bistro-and-b...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>pine-state-biscuits-portland-2</td>\n",
       "      <td>[{'alias': 'southern', 'title': 'Southern'}, {...</td>\n",
       "      <td>{'latitude': 45.5589173, 'longitude': -122.642...</td>\n",
       "      <td>(503) 477-6605</td>\n",
       "      <td>4877.889968</td>\n",
       "      <td>5oed6H5F8qZxNzELq_1e1w</td>\n",
       "      <td>https://s3-media1.fl.yelpcdn.com/bphoto/EJ8afG...</td>\n",
       "      <td>False</td>\n",
       "      <td>{'address1': '2204 NE Alberta St', 'address2':...</td>\n",
       "      <td>Pine State Biscuits</td>\n",
       "      <td>+15034776605</td>\n",
       "      <td>$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>3044</td>\n",
       "      <td>[]</td>\n",
       "      <td>https://www.yelp.com/biz/pine-state-biscuits-p...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              alias  \\\n",
       "0              screen-door-portland   \n",
       "1         salt-and-straw-portland-2   \n",
       "2            tasty-n-alder-portland   \n",
       "3  mother-s-bistro-and-bar-portland   \n",
       "4    pine-state-biscuits-portland-2   \n",
       "\n",
       "                                          categories  \\\n",
       "0  [{'alias': 'southern', 'title': 'Southern'}, {...   \n",
       "1  [{'alias': 'icecream', 'title': 'Ice Cream & F...   \n",
       "2  [{'alias': 'newamerican', 'title': 'American (...   \n",
       "3  [{'alias': 'breakfast_brunch', 'title': 'Break...   \n",
       "4  [{'alias': 'southern', 'title': 'Southern'}, {...   \n",
       "\n",
       "                                         coordinates   display_phone  \\\n",
       "0    {'latitude': 45.52309, 'longitude': -122.64164}  (503) 542-0880   \n",
       "1    {'latitude': 45.52893, 'longitude': -122.69827}  (971) 271-8168   \n",
       "2    {'latitude': 45.52134, 'longitude': -122.68334}  (503) 621-9251   \n",
       "3  {'latitude': 45.5199401129479, 'longitude': -1...  (503) 464-1122   \n",
       "4  {'latitude': 45.5589173, 'longitude': -122.642...  (503) 477-6605   \n",
       "\n",
       "      distance                      id  \\\n",
       "0  1267.160045  OQ2oHkcWA8KNC1Lsvj1SBA   \n",
       "1  3738.689673  o_L9Ss4boqq6ZEF9xeSH6Q   \n",
       "2  2369.690277  FBQp3R_PQIM9eGnkqzmlOw   \n",
       "3  1602.785732  n73rxa6e6-fTIxQzfv4BuA   \n",
       "4  4877.889968  5oed6H5F8qZxNzELq_1e1w   \n",
       "\n",
       "                                           image_url  is_closed  \\\n",
       "0  https://s3-media2.fl.yelpcdn.com/bphoto/yc56V7...      False   \n",
       "1  https://s3-media4.fl.yelpcdn.com/bphoto/MzZ5tn...      False   \n",
       "2  https://s3-media3.fl.yelpcdn.com/bphoto/e-2Uad...      False   \n",
       "3  https://s3-media2.fl.yelpcdn.com/bphoto/LMoNfb...      False   \n",
       "4  https://s3-media1.fl.yelpcdn.com/bphoto/EJ8afG...      False   \n",
       "\n",
       "                                            location                   name  \\\n",
       "0  {'address1': '2337 E Burnside St', 'address2':...            Screen Door   \n",
       "1  {'address1': '838 NW 23rd Ave', 'address2': ''...           Salt & Straw   \n",
       "2  {'address1': '580 SW 12th Ave', 'address2': ''...          Tasty n Alder   \n",
       "3  {'address1': '212 SW Stark St', 'address2': ''...  Mother’s Bistro & Bar   \n",
       "4  {'address1': '2204 NE Alberta St', 'address2':...    Pine State Biscuits   \n",
       "\n",
       "          phone price  rating  review_count transactions  \\\n",
       "0  +15035420880    $$     4.5          5862     [pickup]   \n",
       "1  +19712718168    $$     4.5          3177           []   \n",
       "2  +15036219251    $$     4.5          3156           []   \n",
       "3  +15034641122    $$     4.5          3638           []   \n",
       "4  +15034776605     $     4.5          3044           []   \n",
       "\n",
       "                                                 url  \n",
       "0  https://www.yelp.com/biz/screen-door-portland?...  \n",
       "1  https://www.yelp.com/biz/salt-and-straw-portla...  \n",
       "2  https://www.yelp.com/biz/tasty-n-alder-portlan...  \n",
       "3  https://www.yelp.com/biz/mother-s-bistro-and-b...  \n",
       "4  https://www.yelp.com/biz/pine-state-biscuits-p...  "
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw_PORT_df = pd.DataFrame.from_dict(yelp_PORT)\n",
    "raw_PORT_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "#loop for DET dataset\n",
    "yelp_DETp = []\n",
    "yelp_DET = []\n",
    "#print(offset[i])\n",
    "for i in range(0, 1000):\n",
    "    response = client.search_query(location=\"Detroit, MI\", limit=1, offset=i)\n",
    "    yelp_DET.append(response[\"businesses\"][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1000"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(yelp_DET)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>alias</th>\n",
       "      <th>categories</th>\n",
       "      <th>coordinates</th>\n",
       "      <th>display_phone</th>\n",
       "      <th>distance</th>\n",
       "      <th>id</th>\n",
       "      <th>image_url</th>\n",
       "      <th>is_closed</th>\n",
       "      <th>location</th>\n",
       "      <th>name</th>\n",
       "      <th>phone</th>\n",
       "      <th>price</th>\n",
       "      <th>rating</th>\n",
       "      <th>review_count</th>\n",
       "      <th>transactions</th>\n",
       "      <th>url</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>green-dot-stables-detroit-2</td>\n",
       "      <td>[{'alias': 'bars', 'title': 'Bars'}, {'alias':...</td>\n",
       "      <td>{'latitude': 42.3218706734797, 'longitude': -8...</td>\n",
       "      <td>(313) 962-5588</td>\n",
       "      <td>4786.002465</td>\n",
       "      <td>NcM6ASYzFMDN366FsuBTVw</td>\n",
       "      <td>https://s3-media2.fl.yelpcdn.com/bphoto/Sda2BZ...</td>\n",
       "      <td>False</td>\n",
       "      <td>{'address1': '2200 W Lafayette Blvd', 'address...</td>\n",
       "      <td>Green Dot Stables</td>\n",
       "      <td>+13139625588</td>\n",
       "      <td>$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1632</td>\n",
       "      <td>[]</td>\n",
       "      <td>https://www.yelp.com/biz/green-dot-stables-det...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>dime-store-detroit-4</td>\n",
       "      <td>[{'alias': 'breakfast_brunch', 'title': 'Break...</td>\n",
       "      <td>{'latitude': 42.3308060633157, 'longitude': -8...</td>\n",
       "      <td>(313) 962-9106</td>\n",
       "      <td>4983.262815</td>\n",
       "      <td>HYrqw4xlLCNDptBHGrTIbQ</td>\n",
       "      <td>https://s3-media2.fl.yelpcdn.com/bphoto/Q2C4wG...</td>\n",
       "      <td>False</td>\n",
       "      <td>{'address1': '719 Griswold St', 'address2': 'S...</td>\n",
       "      <td>Dime Store</td>\n",
       "      <td>+13139629106</td>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1086</td>\n",
       "      <td>[]</td>\n",
       "      <td>https://www.yelp.com/biz/dime-store-detroit-4?...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>selden-standard-detroit</td>\n",
       "      <td>[{'alias': 'newamerican', 'title': 'American (...</td>\n",
       "      <td>{'latitude': 42.34779, 'longitude': -83.06499}</td>\n",
       "      <td>(313) 438-5055</td>\n",
       "      <td>2684.163524</td>\n",
       "      <td>4p1bXdMdETmyU5qhzFxNxw</td>\n",
       "      <td>https://s3-media2.fl.yelpcdn.com/bphoto/l74-yn...</td>\n",
       "      <td>False</td>\n",
       "      <td>{'address1': '3921 2nd Ave', 'address2': '', '...</td>\n",
       "      <td>Selden Standard</td>\n",
       "      <td>+13134385055</td>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>891</td>\n",
       "      <td>[]</td>\n",
       "      <td>https://www.yelp.com/biz/selden-standard-detro...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>slows-bar-bq-detroit</td>\n",
       "      <td>[{'alias': 'bbq', 'title': 'Barbeque'}, {'alia...</td>\n",
       "      <td>{'latitude': 42.3315986974041, 'longitude': -8...</td>\n",
       "      <td>(313) 962-9828</td>\n",
       "      <td>3642.520896</td>\n",
       "      <td>W8sLqrbS-ZxIuEuQbjAIrw</td>\n",
       "      <td>https://s3-media2.fl.yelpcdn.com/bphoto/fSPXdZ...</td>\n",
       "      <td>False</td>\n",
       "      <td>{'address1': '2138 Michigan Ave', 'address2': ...</td>\n",
       "      <td>Slows Bar BQ</td>\n",
       "      <td>+13139629828</td>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1890</td>\n",
       "      <td>[]</td>\n",
       "      <td>https://www.yelp.com/biz/slows-bar-bq-detroit?...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>supino-pizzeria-detroit</td>\n",
       "      <td>[{'alias': 'pizza', 'title': 'Pizza'}, {'alias...</td>\n",
       "      <td>{'latitude': 42.345476174914, 'longitude': -83...</td>\n",
       "      <td>(313) 567-7879</td>\n",
       "      <td>4587.884055</td>\n",
       "      <td>8ctLeteWujq_EfH2lRSTAw</td>\n",
       "      <td>https://s3-media3.fl.yelpcdn.com/bphoto/5PT9fS...</td>\n",
       "      <td>False</td>\n",
       "      <td>{'address1': '2457 Russell St', 'address2': ''...</td>\n",
       "      <td>Supino Pizzeria</td>\n",
       "      <td>+13135677879</td>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>746</td>\n",
       "      <td>[]</td>\n",
       "      <td>https://www.yelp.com/biz/supino-pizzeria-detro...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         alias  \\\n",
       "0  green-dot-stables-detroit-2   \n",
       "1         dime-store-detroit-4   \n",
       "2      selden-standard-detroit   \n",
       "3         slows-bar-bq-detroit   \n",
       "4      supino-pizzeria-detroit   \n",
       "\n",
       "                                          categories  \\\n",
       "0  [{'alias': 'bars', 'title': 'Bars'}, {'alias':...   \n",
       "1  [{'alias': 'breakfast_brunch', 'title': 'Break...   \n",
       "2  [{'alias': 'newamerican', 'title': 'American (...   \n",
       "3  [{'alias': 'bbq', 'title': 'Barbeque'}, {'alia...   \n",
       "4  [{'alias': 'pizza', 'title': 'Pizza'}, {'alias...   \n",
       "\n",
       "                                         coordinates   display_phone  \\\n",
       "0  {'latitude': 42.3218706734797, 'longitude': -8...  (313) 962-5588   \n",
       "1  {'latitude': 42.3308060633157, 'longitude': -8...  (313) 962-9106   \n",
       "2     {'latitude': 42.34779, 'longitude': -83.06499}  (313) 438-5055   \n",
       "3  {'latitude': 42.3315986974041, 'longitude': -8...  (313) 962-9828   \n",
       "4  {'latitude': 42.345476174914, 'longitude': -83...  (313) 567-7879   \n",
       "\n",
       "      distance                      id  \\\n",
       "0  4786.002465  NcM6ASYzFMDN366FsuBTVw   \n",
       "1  4983.262815  HYrqw4xlLCNDptBHGrTIbQ   \n",
       "2  2684.163524  4p1bXdMdETmyU5qhzFxNxw   \n",
       "3  3642.520896  W8sLqrbS-ZxIuEuQbjAIrw   \n",
       "4  4587.884055  8ctLeteWujq_EfH2lRSTAw   \n",
       "\n",
       "                                           image_url  is_closed  \\\n",
       "0  https://s3-media2.fl.yelpcdn.com/bphoto/Sda2BZ...      False   \n",
       "1  https://s3-media2.fl.yelpcdn.com/bphoto/Q2C4wG...      False   \n",
       "2  https://s3-media2.fl.yelpcdn.com/bphoto/l74-yn...      False   \n",
       "3  https://s3-media2.fl.yelpcdn.com/bphoto/fSPXdZ...      False   \n",
       "4  https://s3-media3.fl.yelpcdn.com/bphoto/5PT9fS...      False   \n",
       "\n",
       "                                            location               name  \\\n",
       "0  {'address1': '2200 W Lafayette Blvd', 'address...  Green Dot Stables   \n",
       "1  {'address1': '719 Griswold St', 'address2': 'S...         Dime Store   \n",
       "2  {'address1': '3921 2nd Ave', 'address2': '', '...    Selden Standard   \n",
       "3  {'address1': '2138 Michigan Ave', 'address2': ...       Slows Bar BQ   \n",
       "4  {'address1': '2457 Russell St', 'address2': ''...    Supino Pizzeria   \n",
       "\n",
       "          phone price  rating  review_count transactions  \\\n",
       "0  +13139625588     $     4.0          1632           []   \n",
       "1  +13139629106    $$     4.5          1086           []   \n",
       "2  +13134385055    $$     4.5           891           []   \n",
       "3  +13139629828    $$     4.0          1890           []   \n",
       "4  +13135677879    $$     4.5           746           []   \n",
       "\n",
       "                                                 url  \n",
       "0  https://www.yelp.com/biz/green-dot-stables-det...  \n",
       "1  https://www.yelp.com/biz/dime-store-detroit-4?...  \n",
       "2  https://www.yelp.com/biz/selden-standard-detro...  \n",
       "3  https://www.yelp.com/biz/slows-bar-bq-detroit?...  \n",
       "4  https://www.yelp.com/biz/supino-pizzeria-detro...  "
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw_DET_df = pd.DataFrame.from_dict(yelp_DET)\n",
    "raw_DET_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "price      914\n",
       "rating    1000\n",
       "dtype: int64"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "graph_data_cle = raw_cle_df[['price', 'rating']]\n",
    "graph_data_cle.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "graph_data_cle_clean = graph_data_cle.dropna(how='any')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "price     914\n",
       "rating    914\n",
       "dtype: int64"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "graph_data_cle_clean.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "price      948\n",
       "rating    1000\n",
       "dtype: int64"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "graph_data_CBUS = raw_CBUS_df[['price', 'rating']]\n",
    "graph_data_CBUS.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "price     948\n",
       "rating    948\n",
       "dtype: int64"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "graph_data_CBUS_clean = graph_data_CBUS.dropna(how='any')\n",
    "graph_data_CBUS_clean.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "price      899\n",
       "rating    1000\n",
       "dtype: int64"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "graph_data_CIN = raw_CIN_df[['price', 'rating']]\n",
    "graph_data_CIN.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "price     899\n",
       "rating    899\n",
       "dtype: int64"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "graph_data_CIN_clean = graph_data_CIN.dropna(how='any')\n",
    "graph_data_CIN_clean.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "price      960\n",
       "rating    1000\n",
       "dtype: int64"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "graph_data_STL = raw_STL_df[['price', 'rating']]\n",
    "graph_data_STL.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "price     960\n",
       "rating    960\n",
       "dtype: int64"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "graph_data_STL_clean = graph_data_STL.dropna(how='any')\n",
    "graph_data_STL_clean.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "price      984\n",
       "rating    1000\n",
       "dtype: int64"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "graph_data_PORT = raw_PORT_df[['price', 'rating']]\n",
    "graph_data_PORT.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "price     984\n",
       "rating    984\n",
       "dtype: int64"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "graph_data_PORT_clean = graph_data_PORT.dropna(how='any')\n",
    "graph_data_PORT_clean.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "price      906\n",
       "rating    1000\n",
       "dtype: int64"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "graph_data_DET = raw_DET_df[['price', 'rating']]\n",
    "graph_data_DET.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "price     906\n",
       "rating    906\n",
       "dtype: int64"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "graph_data_DET_clean = graph_data_DET.dropna(how='any')\n",
    "graph_data_DET_clean.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      $$$\n",
       "1       $$\n",
       "2      $$$\n",
       "3       $$\n",
       "4       $$\n",
       "5       $$\n",
       "6       $$\n",
       "7       $$\n",
       "8        $\n",
       "9        $\n",
       "10      $$\n",
       "11      $$\n",
       "12      $$\n",
       "13      $$\n",
       "14       $\n",
       "15       $\n",
       "16       $\n",
       "17      $$\n",
       "18     $$$\n",
       "19     $$$\n",
       "20      $$\n",
       "21       $\n",
       "22      $$\n",
       "23     $$$\n",
       "24      $$\n",
       "25      $$\n",
       "26      $$\n",
       "27     $$$\n",
       "28     $$$\n",
       "29      $$\n",
       "      ... \n",
       "962      $\n",
       "963      $\n",
       "964      $\n",
       "966      $\n",
       "967     $$\n",
       "968      $\n",
       "969      $\n",
       "970     $$\n",
       "972      $\n",
       "974      $\n",
       "975     $$\n",
       "976     $$\n",
       "977     $$\n",
       "978     $$\n",
       "979      $\n",
       "980     $$\n",
       "984      $\n",
       "985      $\n",
       "987     $$\n",
       "988     $$\n",
       "989      $\n",
       "990      $\n",
       "991      $\n",
       "992     $$\n",
       "993      $\n",
       "994      $\n",
       "995      $\n",
       "996      $\n",
       "997      $\n",
       "998      $\n",
       "Name: price, Length: 914, dtype: object"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "graph_data_cle_clean[\"price\"].astype(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       $$\n",
       "1       $$\n",
       "2       $$\n",
       "3       $$\n",
       "4       $$\n",
       "5        $\n",
       "6       $$\n",
       "7       $$\n",
       "8       $$\n",
       "9       $$\n",
       "10       $\n",
       "11      $$\n",
       "12       $\n",
       "13       $\n",
       "14      $$\n",
       "15      $$\n",
       "16      $$\n",
       "17      $$\n",
       "18      $$\n",
       "19      $$\n",
       "20      $$\n",
       "21      $$\n",
       "22     $$$\n",
       "23      $$\n",
       "24      $$\n",
       "25      $$\n",
       "26      $$\n",
       "27      $$\n",
       "28      $$\n",
       "29       $\n",
       "      ... \n",
       "963     $$\n",
       "965     $$\n",
       "966      $\n",
       "967      $\n",
       "968     $$\n",
       "969     $$\n",
       "970      $\n",
       "971      $\n",
       "972      $\n",
       "973      $\n",
       "974      $\n",
       "975      $\n",
       "976      $\n",
       "977      $\n",
       "979     $$\n",
       "980      $\n",
       "981      $\n",
       "983     $$\n",
       "984      $\n",
       "987      $\n",
       "988     $$\n",
       "990     $$\n",
       "991      $\n",
       "992     $$\n",
       "993     $$\n",
       "994      $\n",
       "995     $$\n",
       "996     $$\n",
       "997      $\n",
       "999     $$\n",
       "Name: price, Length: 948, dtype: object"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "graph_data_CBUS_clean[\"price\"].astype(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0        $$\n",
       "1        $$\n",
       "2         $\n",
       "3       $$$\n",
       "4        $$\n",
       "5        $$\n",
       "6        $$\n",
       "7        $$\n",
       "8        $$\n",
       "9        $$\n",
       "10       $$\n",
       "11        $\n",
       "12      $$$\n",
       "13      $$$\n",
       "14       $$\n",
       "15        $\n",
       "16       $$\n",
       "18       $$\n",
       "19      $$$\n",
       "20       $$\n",
       "21       $$\n",
       "22      $$$\n",
       "23       $$\n",
       "24       $$\n",
       "25      $$$\n",
       "26       $$\n",
       "27       $$\n",
       "28       $$\n",
       "29       $$\n",
       "30     $$$$\n",
       "       ... \n",
       "968       $\n",
       "969       $\n",
       "970      $$\n",
       "971       $\n",
       "972       $\n",
       "973       $\n",
       "974       $\n",
       "975      $$\n",
       "977       $\n",
       "978       $\n",
       "979      $$\n",
       "980       $\n",
       "981       $\n",
       "982       $\n",
       "983      $$\n",
       "984       $\n",
       "985       $\n",
       "986       $\n",
       "987       $\n",
       "988     $$$\n",
       "989       $\n",
       "990       $\n",
       "991       $\n",
       "992       $\n",
       "993       $\n",
       "994      $$\n",
       "996       $\n",
       "997       $\n",
       "998      $$\n",
       "999       $\n",
       "Name: price, Length: 899, dtype: object"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "graph_data_CIN_clean[\"price\"].astype(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       $$\n",
       "1        $\n",
       "2       $$\n",
       "3       $$\n",
       "4       $$\n",
       "5        $\n",
       "7       $$\n",
       "8       $$\n",
       "9       $$\n",
       "10       $\n",
       "11      $$\n",
       "12      $$\n",
       "13      $$\n",
       "14      $$\n",
       "15      $$\n",
       "16      $$\n",
       "17      $$\n",
       "18      $$\n",
       "19      $$\n",
       "20       $\n",
       "21      $$\n",
       "22      $$\n",
       "23      $$\n",
       "24       $\n",
       "25      $$\n",
       "26       $\n",
       "27       $\n",
       "28      $$\n",
       "29     $$$\n",
       "30       $\n",
       "      ... \n",
       "967     $$\n",
       "968     $$\n",
       "969      $\n",
       "970     $$\n",
       "973     $$\n",
       "974      $\n",
       "975      $\n",
       "976      $\n",
       "977      $\n",
       "978     $$\n",
       "979      $\n",
       "980      $\n",
       "981      $\n",
       "982      $\n",
       "983      $\n",
       "984      $\n",
       "985     $$\n",
       "986      $\n",
       "987     $$\n",
       "988     $$\n",
       "990      $\n",
       "991      $\n",
       "992      $\n",
       "993      $\n",
       "994      $\n",
       "995      $\n",
       "996      $\n",
       "997      $\n",
       "998      $\n",
       "999      $\n",
       "Name: price, Length: 960, dtype: object"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "graph_data_STL_clean[\"price\"].astype(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       $$\n",
       "1       $$\n",
       "2       $$\n",
       "3       $$\n",
       "4        $\n",
       "5      $$$\n",
       "6        $\n",
       "7       $$\n",
       "8       $$\n",
       "9       $$\n",
       "10       $\n",
       "11      $$\n",
       "12      $$\n",
       "13      $$\n",
       "14     $$$\n",
       "15     $$$\n",
       "16      $$\n",
       "17      $$\n",
       "18       $\n",
       "19      $$\n",
       "20       $\n",
       "21      $$\n",
       "22      $$\n",
       "23      $$\n",
       "25      $$\n",
       "26       $\n",
       "27     $$$\n",
       "28       $\n",
       "29      $$\n",
       "30      $$\n",
       "      ... \n",
       "969     $$\n",
       "970     $$\n",
       "971     $$\n",
       "972     $$\n",
       "973     $$\n",
       "974     $$\n",
       "976     $$\n",
       "977     $$\n",
       "978     $$\n",
       "979     $$\n",
       "980      $\n",
       "981     $$\n",
       "982     $$\n",
       "983      $\n",
       "984     $$\n",
       "985     $$\n",
       "986      $\n",
       "987     $$\n",
       "988     $$\n",
       "989      $\n",
       "990     $$\n",
       "991      $\n",
       "992      $\n",
       "993     $$\n",
       "994      $\n",
       "995      $\n",
       "996      $\n",
       "997     $$\n",
       "998      $\n",
       "999      $\n",
       "Name: price, Length: 984, dtype: object"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "graph_data_PORT_clean[\"price\"].astype(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0        $\n",
       "1       $$\n",
       "2       $$\n",
       "3       $$\n",
       "4       $$\n",
       "5       $$\n",
       "6       $$\n",
       "7      $$$\n",
       "8       $$\n",
       "9        $\n",
       "10      $$\n",
       "11      $$\n",
       "12      $$\n",
       "13      $$\n",
       "14      $$\n",
       "15       $\n",
       "16      $$\n",
       "17     $$$\n",
       "18      $$\n",
       "19      $$\n",
       "20       $\n",
       "21      $$\n",
       "22     $$$\n",
       "23      $$\n",
       "24       $\n",
       "25       $\n",
       "26       $\n",
       "27      $$\n",
       "28      $$\n",
       "29       $\n",
       "      ... \n",
       "959      $\n",
       "960      $\n",
       "961      $\n",
       "962      $\n",
       "963      $\n",
       "964     $$\n",
       "966      $\n",
       "968      $\n",
       "970      $\n",
       "971      $\n",
       "973     $$\n",
       "974      $\n",
       "975     $$\n",
       "979      $\n",
       "980     $$\n",
       "981     $$\n",
       "982      $\n",
       "983      $\n",
       "986    $$$\n",
       "987     $$\n",
       "988      $\n",
       "989     $$\n",
       "990     $$\n",
       "991      $\n",
       "992      $\n",
       "995     $$\n",
       "996      $\n",
       "997     $$\n",
       "998      $\n",
       "999      $\n",
       "Name: price, Length: 906, dtype: object"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "graph_data_DET_clean[\"price\"].astype(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Aaron\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>price</th>\n",
       "      <th>rating</th>\n",
       "      <th>price_length</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>$$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>$$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>$$$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>$$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>$$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>$$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>$$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>962</th>\n",
       "      <td>$</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>963</th>\n",
       "      <td>$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>964</th>\n",
       "      <td>$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>966</th>\n",
       "      <td>$</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>967</th>\n",
       "      <td>$$</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>968</th>\n",
       "      <td>$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>969</th>\n",
       "      <td>$</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>970</th>\n",
       "      <td>$$</td>\n",
       "      <td>2.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>972</th>\n",
       "      <td>$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>974</th>\n",
       "      <td>$</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>975</th>\n",
       "      <td>$$</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>976</th>\n",
       "      <td>$$</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>977</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>978</th>\n",
       "      <td>$$</td>\n",
       "      <td>2.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>979</th>\n",
       "      <td>$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>980</th>\n",
       "      <td>$$</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>984</th>\n",
       "      <td>$</td>\n",
       "      <td>1.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>985</th>\n",
       "      <td>$</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>987</th>\n",
       "      <td>$$</td>\n",
       "      <td>2.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>988</th>\n",
       "      <td>$$</td>\n",
       "      <td>2.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>989</th>\n",
       "      <td>$</td>\n",
       "      <td>2.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>990</th>\n",
       "      <td>$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991</th>\n",
       "      <td>$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>992</th>\n",
       "      <td>$$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>993</th>\n",
       "      <td>$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>994</th>\n",
       "      <td>$</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>914 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    price  rating  price_length\n",
       "0     $$$     4.0             3\n",
       "1      $$     4.0             2\n",
       "2     $$$     4.5             3\n",
       "3      $$     4.5             2\n",
       "4      $$     4.0             2\n",
       "5      $$     4.5             2\n",
       "6      $$     4.0             2\n",
       "7      $$     4.0             2\n",
       "8       $     4.0             1\n",
       "9       $     4.0             1\n",
       "10     $$     4.5             2\n",
       "11     $$     4.5             2\n",
       "12     $$     4.0             2\n",
       "13     $$     4.5             2\n",
       "14      $     4.5             1\n",
       "15      $     4.5             1\n",
       "16      $     4.5             1\n",
       "17     $$     4.0             2\n",
       "18    $$$     3.5             3\n",
       "19    $$$     4.0             3\n",
       "20     $$     4.5             2\n",
       "21      $     4.5             1\n",
       "22     $$     4.0             2\n",
       "23    $$$     4.0             3\n",
       "24     $$     4.0             2\n",
       "25     $$     4.0             2\n",
       "26     $$     4.0             2\n",
       "27    $$$     4.5             3\n",
       "28    $$$     4.0             3\n",
       "29     $$     4.0             2\n",
       "..    ...     ...           ...\n",
       "962     $     3.0             1\n",
       "963     $     4.0             1\n",
       "964     $     3.5             1\n",
       "966     $     3.0             1\n",
       "967    $$     5.0             2\n",
       "968     $     3.5             1\n",
       "969     $     3.0             1\n",
       "970    $$     2.5             2\n",
       "972     $     4.5             1\n",
       "974     $     3.0             1\n",
       "975    $$     3.0             2\n",
       "976    $$     3.0             2\n",
       "977    $$     4.0             2\n",
       "978    $$     2.5             2\n",
       "979     $     3.5             1\n",
       "980    $$     3.0             2\n",
       "984     $     1.5             1\n",
       "985     $     2.0             1\n",
       "987    $$     2.5             2\n",
       "988    $$     2.5             2\n",
       "989     $     2.5             1\n",
       "990     $     4.5             1\n",
       "991     $     4.0             1\n",
       "992    $$     3.5             2\n",
       "993     $     4.0             1\n",
       "994     $     3.0             1\n",
       "995     $     4.5             1\n",
       "996     $     3.5             1\n",
       "997     $     3.5             1\n",
       "998     $     3.5             1\n",
       "\n",
       "[914 rows x 3 columns]"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "graph_data_cle_clean['price_length'] = graph_data_cle_clean['price'].apply(len)\n",
    "graph_data_cle_clean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Aaron\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>price</th>\n",
       "      <th>rating</th>\n",
       "      <th>price_length</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>$$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>$</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>963</th>\n",
       "      <td>$$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>965</th>\n",
       "      <td>$$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>966</th>\n",
       "      <td>$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>967</th>\n",
       "      <td>$</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>968</th>\n",
       "      <td>$$</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>969</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>970</th>\n",
       "      <td>$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>971</th>\n",
       "      <td>$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>972</th>\n",
       "      <td>$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>973</th>\n",
       "      <td>$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>974</th>\n",
       "      <td>$</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>975</th>\n",
       "      <td>$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>976</th>\n",
       "      <td>$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>977</th>\n",
       "      <td>$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>979</th>\n",
       "      <td>$$</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>980</th>\n",
       "      <td>$</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>981</th>\n",
       "      <td>$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>983</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>984</th>\n",
       "      <td>$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>987</th>\n",
       "      <td>$</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>988</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>990</th>\n",
       "      <td>$$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991</th>\n",
       "      <td>$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>992</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>993</th>\n",
       "      <td>$$</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>994</th>\n",
       "      <td>$</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>$$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>$$</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>$</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>$$</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>948 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    price  rating  price_length\n",
       "0      $$     4.5             2\n",
       "1      $$     4.5             2\n",
       "2      $$     4.5             2\n",
       "3      $$     4.5             2\n",
       "4      $$     4.5             2\n",
       "5       $     4.5             1\n",
       "6      $$     4.5             2\n",
       "7      $$     4.0             2\n",
       "8      $$     4.0             2\n",
       "9      $$     4.5             2\n",
       "10      $     4.5             1\n",
       "11     $$     4.5             2\n",
       "12      $     4.5             1\n",
       "13      $     4.0             1\n",
       "14     $$     4.0             2\n",
       "15     $$     4.5             2\n",
       "16     $$     4.5             2\n",
       "17     $$     4.0             2\n",
       "18     $$     4.5             2\n",
       "19     $$     4.5             2\n",
       "20     $$     4.0             2\n",
       "21     $$     4.5             2\n",
       "22    $$$     4.0             3\n",
       "23     $$     4.5             2\n",
       "24     $$     4.5             2\n",
       "25     $$     4.5             2\n",
       "26     $$     4.0             2\n",
       "27     $$     4.5             2\n",
       "28     $$     4.5             2\n",
       "29      $     5.0             1\n",
       "..    ...     ...           ...\n",
       "963    $$     3.5             2\n",
       "965    $$     3.5             2\n",
       "966     $     3.5             1\n",
       "967     $     3.0             1\n",
       "968    $$     3.0             2\n",
       "969    $$     4.5             2\n",
       "970     $     3.5             1\n",
       "971     $     4.0             1\n",
       "972     $     3.5             1\n",
       "973     $     4.5             1\n",
       "974     $     3.0             1\n",
       "975     $     4.5             1\n",
       "976     $     3.5             1\n",
       "977     $     3.5             1\n",
       "979    $$     3.0             2\n",
       "980     $     3.0             1\n",
       "981     $     4.5             1\n",
       "983    $$     4.5             2\n",
       "984     $     3.5             1\n",
       "987     $     3.0             1\n",
       "988    $$     4.0             2\n",
       "990    $$     3.5             2\n",
       "991     $     4.0             1\n",
       "992    $$     4.0             2\n",
       "993    $$     3.0             2\n",
       "994     $     3.0             1\n",
       "995    $$     3.5             2\n",
       "996    $$     3.0             2\n",
       "997     $     3.0             1\n",
       "999    $$     3.0             2\n",
       "\n",
       "[948 rows x 3 columns]"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "graph_data_CBUS_clean['price_length'] = graph_data_CBUS_clean['price'].apply(len)\n",
    "graph_data_CBUS_clean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Aaron\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>price</th>\n",
       "      <th>rating</th>\n",
       "      <th>price_length</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>$$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>$$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>$$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>$$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>$$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>$$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>$$$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>968</th>\n",
       "      <td>$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>969</th>\n",
       "      <td>$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>970</th>\n",
       "      <td>$$</td>\n",
       "      <td>2.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>971</th>\n",
       "      <td>$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>972</th>\n",
       "      <td>$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>973</th>\n",
       "      <td>$</td>\n",
       "      <td>2.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>974</th>\n",
       "      <td>$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>975</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>977</th>\n",
       "      <td>$</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>978</th>\n",
       "      <td>$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>979</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>980</th>\n",
       "      <td>$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>981</th>\n",
       "      <td>$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>982</th>\n",
       "      <td>$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>983</th>\n",
       "      <td>$$</td>\n",
       "      <td>2.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>984</th>\n",
       "      <td>$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>985</th>\n",
       "      <td>$</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>986</th>\n",
       "      <td>$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>987</th>\n",
       "      <td>$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>988</th>\n",
       "      <td>$$$</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>989</th>\n",
       "      <td>$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>990</th>\n",
       "      <td>$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991</th>\n",
       "      <td>$</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>992</th>\n",
       "      <td>$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>993</th>\n",
       "      <td>$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>994</th>\n",
       "      <td>$$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>$$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>$</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>899 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    price  rating  price_length\n",
       "0      $$     4.5             2\n",
       "1      $$     4.5             2\n",
       "2       $     4.5             1\n",
       "3     $$$     4.5             3\n",
       "4      $$     4.5             2\n",
       "5      $$     4.5             2\n",
       "6      $$     4.0             2\n",
       "7      $$     4.5             2\n",
       "8      $$     4.0             2\n",
       "9      $$     4.0             2\n",
       "10     $$     4.5             2\n",
       "11      $     4.5             1\n",
       "12    $$$     4.5             3\n",
       "13    $$$     4.5             3\n",
       "14     $$     4.0             2\n",
       "15      $     4.0             1\n",
       "16     $$     4.0             2\n",
       "18     $$     4.0             2\n",
       "19    $$$     4.5             3\n",
       "20     $$     4.5             2\n",
       "21     $$     4.0             2\n",
       "22    $$$     4.5             3\n",
       "23     $$     4.0             2\n",
       "24     $$     4.5             2\n",
       "25    $$$     4.5             3\n",
       "26     $$     4.5             2\n",
       "27     $$     4.5             2\n",
       "28     $$     4.0             2\n",
       "29     $$     4.5             2\n",
       "30   $$$$     4.5             4\n",
       "..    ...     ...           ...\n",
       "968     $     3.5             1\n",
       "969     $     3.5             1\n",
       "970    $$     2.5             2\n",
       "971     $     4.0             1\n",
       "972     $     4.5             1\n",
       "973     $     2.5             1\n",
       "974     $     3.5             1\n",
       "975    $$     4.5             2\n",
       "977     $     3.0             1\n",
       "978     $     4.5             1\n",
       "979    $$     4.0             2\n",
       "980     $     3.5             1\n",
       "981     $     3.5             1\n",
       "982     $     3.5             1\n",
       "983    $$     2.5             2\n",
       "984     $     4.5             1\n",
       "985     $     3.0             1\n",
       "986     $     3.5             1\n",
       "987     $     3.5             1\n",
       "988   $$$     3.0             3\n",
       "989     $     3.5             1\n",
       "990     $     3.5             1\n",
       "991     $     5.0             1\n",
       "992     $     4.0             1\n",
       "993     $     3.5             1\n",
       "994    $$     3.5             2\n",
       "996     $     4.0             1\n",
       "997     $     3.5             1\n",
       "998    $$     3.5             2\n",
       "999     $     3.0             1\n",
       "\n",
       "[899 rows x 3 columns]"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "graph_data_CIN_clean['price_length'] = graph_data_CIN_clean['price'].apply(len)\n",
    "graph_data_CIN_clean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Aaron\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>price</th>\n",
       "      <th>rating</th>\n",
       "      <th>price_length</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>$</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>$</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>$$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>967</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>968</th>\n",
       "      <td>$$</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>969</th>\n",
       "      <td>$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>970</th>\n",
       "      <td>$$</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>973</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>974</th>\n",
       "      <td>$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>975</th>\n",
       "      <td>$</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>976</th>\n",
       "      <td>$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>977</th>\n",
       "      <td>$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>978</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>979</th>\n",
       "      <td>$</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>980</th>\n",
       "      <td>$</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>981</th>\n",
       "      <td>$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>982</th>\n",
       "      <td>$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>983</th>\n",
       "      <td>$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>984</th>\n",
       "      <td>$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>985</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>986</th>\n",
       "      <td>$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>987</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>988</th>\n",
       "      <td>$$</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>990</th>\n",
       "      <td>$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991</th>\n",
       "      <td>$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>992</th>\n",
       "      <td>$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>993</th>\n",
       "      <td>$</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>994</th>\n",
       "      <td>$</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>$</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>960 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    price  rating  price_length\n",
       "0      $$     4.5             2\n",
       "1       $     5.0             1\n",
       "2      $$     4.5             2\n",
       "3      $$     4.5             2\n",
       "4      $$     4.5             2\n",
       "5       $     4.5             1\n",
       "7      $$     4.5             2\n",
       "8      $$     4.5             2\n",
       "9      $$     4.5             2\n",
       "10      $     4.5             1\n",
       "11     $$     4.5             2\n",
       "12     $$     4.0             2\n",
       "13     $$     4.0             2\n",
       "14     $$     4.0             2\n",
       "15     $$     4.5             2\n",
       "16     $$     4.5             2\n",
       "17     $$     4.5             2\n",
       "18     $$     4.0             2\n",
       "19     $$     4.5             2\n",
       "20      $     4.5             1\n",
       "21     $$     4.5             2\n",
       "22     $$     4.5             2\n",
       "23     $$     4.0             2\n",
       "24      $     5.0             1\n",
       "25     $$     4.5             2\n",
       "26      $     4.0             1\n",
       "27      $     4.0             1\n",
       "28     $$     4.0             2\n",
       "29    $$$     4.5             3\n",
       "30      $     4.5             1\n",
       "..    ...     ...           ...\n",
       "967    $$     4.0             2\n",
       "968    $$     3.0             2\n",
       "969     $     4.0             1\n",
       "970    $$     3.0             2\n",
       "973    $$     4.5             2\n",
       "974     $     4.5             1\n",
       "975     $     3.0             1\n",
       "976     $     3.5             1\n",
       "977     $     4.0             1\n",
       "978    $$     4.0             2\n",
       "979     $     3.0             1\n",
       "980     $     3.0             1\n",
       "981     $     3.5             1\n",
       "982     $     4.5             1\n",
       "983     $     4.0             1\n",
       "984     $     4.5             1\n",
       "985    $$     4.0             2\n",
       "986     $     3.5             1\n",
       "987    $$     4.5             2\n",
       "988    $$     3.0             2\n",
       "990     $     4.0             1\n",
       "991     $     3.5             1\n",
       "992     $     4.0             1\n",
       "993     $     3.0             1\n",
       "994     $     3.0             1\n",
       "995     $     4.0             1\n",
       "996     $     5.0             1\n",
       "997     $     4.5             1\n",
       "998     $     4.0             1\n",
       "999     $     4.0             1\n",
       "\n",
       "[960 rows x 3 columns]"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "graph_data_STL_clean['price_length'] = graph_data_STL_clean['price'].apply(len)\n",
    "graph_data_STL_clean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Aaron\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>price</th>\n",
       "      <th>rating</th>\n",
       "      <th>price_length</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>$$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>$$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>$$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>$</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>$$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>969</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>970</th>\n",
       "      <td>$$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>971</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>972</th>\n",
       "      <td>$$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>973</th>\n",
       "      <td>$$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>974</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>976</th>\n",
       "      <td>$$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>977</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>978</th>\n",
       "      <td>$$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>979</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>980</th>\n",
       "      <td>$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>981</th>\n",
       "      <td>$$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>982</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>983</th>\n",
       "      <td>$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>984</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>985</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>986</th>\n",
       "      <td>$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>987</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>988</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>989</th>\n",
       "      <td>$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>990</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991</th>\n",
       "      <td>$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>992</th>\n",
       "      <td>$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>993</th>\n",
       "      <td>$$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>994</th>\n",
       "      <td>$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>984 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    price  rating  price_length\n",
       "0      $$     4.5             2\n",
       "1      $$     4.5             2\n",
       "2      $$     4.5             2\n",
       "3      $$     4.5             2\n",
       "4       $     4.5             1\n",
       "5     $$$     4.5             3\n",
       "6       $     4.5             1\n",
       "7      $$     4.5             2\n",
       "8      $$     4.0             2\n",
       "9      $$     4.0             2\n",
       "10      $     4.5             1\n",
       "11     $$     4.0             2\n",
       "12     $$     4.5             2\n",
       "13     $$     4.0             2\n",
       "14    $$$     4.5             3\n",
       "15    $$$     4.0             3\n",
       "16     $$     4.5             2\n",
       "17     $$     4.5             2\n",
       "18      $     4.5             1\n",
       "19     $$     4.5             2\n",
       "20      $     5.0             1\n",
       "21     $$     4.5             2\n",
       "22     $$     4.5             2\n",
       "23     $$     4.0             2\n",
       "25     $$     4.5             2\n",
       "26      $     4.5             1\n",
       "27    $$$     4.0             3\n",
       "28      $     4.5             1\n",
       "29     $$     4.5             2\n",
       "30     $$     4.0             2\n",
       "..    ...     ...           ...\n",
       "969    $$     4.5             2\n",
       "970    $$     3.5             2\n",
       "971    $$     4.0             2\n",
       "972    $$     3.5             2\n",
       "973    $$     3.5             2\n",
       "974    $$     4.0             2\n",
       "976    $$     3.5             2\n",
       "977    $$     4.0             2\n",
       "978    $$     3.5             2\n",
       "979    $$     4.0             2\n",
       "980     $     4.5             1\n",
       "981    $$     3.5             2\n",
       "982    $$     4.0             2\n",
       "983     $     4.0             1\n",
       "984    $$     4.0             2\n",
       "985    $$     4.0             2\n",
       "986     $     4.0             1\n",
       "987    $$     4.5             2\n",
       "988    $$     4.5             2\n",
       "989     $     4.0             1\n",
       "990    $$     4.5             2\n",
       "991     $     4.0             1\n",
       "992     $     3.5             1\n",
       "993    $$     3.5             2\n",
       "994     $     4.5             1\n",
       "995     $     4.0             1\n",
       "996     $     4.0             1\n",
       "997    $$     4.0             2\n",
       "998     $     4.0             1\n",
       "999     $     4.5             1\n",
       "\n",
       "[984 rows x 3 columns]"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "graph_data_PORT_clean['price_length'] = graph_data_PORT_clean['price'].apply(len)\n",
    "graph_data_PORT_clean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Aaron\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>price</th>\n",
       "      <th>rating</th>\n",
       "      <th>price_length</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>$$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>$$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>$$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>959</th>\n",
       "      <td>$</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>960</th>\n",
       "      <td>$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>961</th>\n",
       "      <td>$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>962</th>\n",
       "      <td>$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>963</th>\n",
       "      <td>$</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>964</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>966</th>\n",
       "      <td>$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>968</th>\n",
       "      <td>$</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>970</th>\n",
       "      <td>$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>971</th>\n",
       "      <td>$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>973</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>974</th>\n",
       "      <td>$</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>975</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>979</th>\n",
       "      <td>$</td>\n",
       "      <td>1.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>980</th>\n",
       "      <td>$$</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>981</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>982</th>\n",
       "      <td>$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>983</th>\n",
       "      <td>$</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>986</th>\n",
       "      <td>$$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>987</th>\n",
       "      <td>$$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>988</th>\n",
       "      <td>$</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>989</th>\n",
       "      <td>$$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>990</th>\n",
       "      <td>$$</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991</th>\n",
       "      <td>$</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>992</th>\n",
       "      <td>$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>$$</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>$$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>$</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>$</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>906 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    price  rating  price_length\n",
       "0       $     4.0             1\n",
       "1      $$     4.5             2\n",
       "2      $$     4.5             2\n",
       "3      $$     4.0             2\n",
       "4      $$     4.5             2\n",
       "5      $$     4.5             2\n",
       "6      $$     4.0             2\n",
       "7     $$$     4.0             3\n",
       "8      $$     4.0             2\n",
       "9       $     4.0             1\n",
       "10     $$     4.5             2\n",
       "11     $$     4.0             2\n",
       "12     $$     4.0             2\n",
       "13     $$     4.0             2\n",
       "14     $$     4.5             2\n",
       "15      $     4.5             1\n",
       "16     $$     4.0             2\n",
       "17    $$$     4.0             3\n",
       "18     $$     4.5             2\n",
       "19     $$     4.0             2\n",
       "20      $     4.0             1\n",
       "21     $$     4.0             2\n",
       "22    $$$     4.0             3\n",
       "23     $$     4.5             2\n",
       "24      $     4.5             1\n",
       "25      $     4.5             1\n",
       "26      $     4.5             1\n",
       "27     $$     4.0             2\n",
       "28     $$     4.0             2\n",
       "29      $     4.5             1\n",
       "..    ...     ...           ...\n",
       "959     $     5.0             1\n",
       "960     $     3.5             1\n",
       "961     $     4.0             1\n",
       "962     $     3.5             1\n",
       "963     $     3.0             1\n",
       "964    $$     4.0             2\n",
       "966     $     4.0             1\n",
       "968     $     5.0             1\n",
       "970     $     4.5             1\n",
       "971     $     3.5             1\n",
       "973    $$     4.0             2\n",
       "974     $     3.0             1\n",
       "975    $$     4.5             2\n",
       "979     $     1.5             1\n",
       "980    $$     2.0             2\n",
       "981    $$     4.0             2\n",
       "982     $     4.0             1\n",
       "983     $     3.0             1\n",
       "986   $$$     4.0             3\n",
       "987    $$     3.5             2\n",
       "988     $     4.5             1\n",
       "989    $$     3.5             2\n",
       "990    $$     3.0             2\n",
       "991     $     5.0             1\n",
       "992     $     4.0             1\n",
       "995    $$     3.0             2\n",
       "996     $     3.5             1\n",
       "997    $$     4.0             2\n",
       "998     $     4.0             1\n",
       "999     $     3.5             1\n",
       "\n",
       "[906 rows x 3 columns]"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "graph_data_DET_clean['price_length'] = graph_data_DET_clean['price'].apply(len)\n",
    "graph_data_DET_clean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "cle_new_df = graph_data_cle_clean[['price_length', 'rating']]\n",
    "cle_new_df = cle_new_df.rename(index=str, columns={\"price_length\": \"price\"})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "CBUS_new_df = graph_data_CBUS_clean[['price_length', 'rating']]\n",
    "CBUS_new_df = CBUS_new_df.rename(index=str, columns={\"price_length\": \"price\"})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "CIN_new_df = graph_data_CIN_clean[['price_length', 'rating']]\n",
    "CIN_new_df = CIN_new_df.rename(index=str, columns={\"price_length\": \"price\"})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "STL_new_df = graph_data_STL_clean[['price_length', 'rating']]\n",
    "STL_new_df = STL_new_df.rename(index=str, columns={\"price_length\": \"price\"})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "PORT_new_df = graph_data_PORT_clean[['price_length', 'rating']]\n",
    "PORT_new_df = PORT_new_df.rename(index=str, columns={\"price_length\": \"price\"})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [],
   "source": [
    "DET_new_df = graph_data_DET_clean[['price_length', 'rating']]\n",
    "DET_new_df = DET_new_df.rename(index=str, columns={\"price_length\": \"price\"})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x18b02702ba8>"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#scatter plot of CLE data\n",
    "x_limit = 4\n",
    "cle_x_axis = cle_new_df[\"price\"]\n",
    "cle_y_axis = cle_new_df[\"rating\"]\n",
    "plt.scatter(cle_new_df[\"price\"], cle_new_df[\"rating\"], marker=\"o\", facecolors=\"red\", edgecolors=\"black\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x18b0264e4a8>"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#scatter plot of CBUS data\n",
    "x_limit = 4\n",
    "CBUS_x_axis = CBUS_new_df[\"price\"]\n",
    "CBUS_y_axis = CBUS_new_df[\"rating\"]\n",
    "plt.scatter(CBUS_new_df[\"price\"], CBUS_new_df[\"rating\"], marker=\"o\", facecolors=\"red\", edgecolors=\"black\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x18b026af198>"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#scatter plot of CIN data\n",
    "x_limit = 4\n",
    "CIN_x_axis = CIN_new_df[\"price\"]\n",
    "CIN_y_axis = CIN_new_df[\"rating\"]\n",
    "plt.scatter(CIN_new_df[\"price\"], CIN_new_df[\"rating\"], marker=\"o\", facecolors=\"red\", edgecolors=\"black\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x18b02762cf8>"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#scatter plot of STL data\n",
    "x_limit = 4\n",
    "STL_x_axis = STL_new_df[\"price\"]\n",
    "STL_y_axis = STL_new_df[\"rating\"]\n",
    "plt.scatter(STL_new_df[\"price\"], STL_new_df[\"rating\"], marker=\"o\", facecolors=\"red\", edgecolors=\"black\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x18b03793438>"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#scatter plot of PORT data\n",
    "x_limit = 4\n",
    "PORT_x_axis = PORT_new_df[\"price\"]\n",
    "PORT_y_axis = PORT_new_df[\"rating\"]\n",
    "plt.scatter(PORT_new_df[\"price\"], PORT_new_df[\"rating\"], marker=\"o\", facecolors=\"red\", edgecolors=\"black\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x18b01d3bba8>"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#scatter plot of DET data\n",
    "x_limit = 4\n",
    "DET_x_axis = DET_new_df[\"price\"]\n",
    "DET_y_axis = DET_new_df[\"rating\"]\n",
    "plt.scatter(DET_new_df[\"price\"], DET_new_df[\"rating\"], marker=\"o\", facecolors=\"red\", edgecolors=\"black\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x18b01ce6e80>"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#boxplot of CLE data\n",
    "cle_new_df.boxplot(\"rating\", by=\"price\", figsize=(10, 5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x18b01da80b8>"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#boxplot of CBUS data\n",
    "CBUS_new_df.boxplot(\"rating\", by=\"price\", figsize=(10, 5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x18b01e41390>"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#boxplot of CIN data\n",
    "CIN_new_df.boxplot(\"rating\", by=\"price\", figsize=(10, 5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x18b01eda908>"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#boxplot of STL data\n",
    "STL_new_df.boxplot(\"rating\", by=\"price\", figsize=(10, 5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x18b01f5e2b0>"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#boxplot of PORT data\n",
    "PORT_new_df.boxplot(\"rating\", by=\"price\", figsize=(10, 5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x18b02008da0>"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#boxplot of DET data\n",
    "DET_new_df.boxplot(\"rating\", by=\"price\", figsize=(10, 5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "F_onewayResult(statistic=0.8654160048456331, pvalue=0.4585467935982437)"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#stat analysis on CLE data\n",
    "cle_group1 = cle_new_df[cle_new_df[\"price\"] == 1][\"rating\"]\n",
    "cle_group2 = cle_new_df[cle_new_df[\"price\"] == 2][\"rating\"]\n",
    "cle_group3 = cle_new_df[cle_new_df[\"price\"] == 3][\"rating\"]\n",
    "cle_group4 = cle_new_df[cle_new_df[\"price\"] == 4][\"rating\"]\n",
    "stats.f_oneway(cle_group1, cle_group2, cle_group3, cle_group4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>price</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>914.000000</td>\n",
       "      <td>914.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.603939</td>\n",
       "      <td>3.832057</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.594448</td>\n",
       "      <td>0.604357</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            price      rating\n",
       "count  914.000000  914.000000\n",
       "mean     1.603939    3.832057\n",
       "std      0.594448    0.604357\n",
       "min      1.000000    1.500000\n",
       "25%      1.000000    3.500000\n",
       "50%      2.000000    4.000000\n",
       "75%      2.000000    4.000000\n",
       "max      4.000000    5.000000"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cle_new_df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "F_onewayResult(statistic=7.547992328966491, pvalue=5.414948758580707e-05)"
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#stat analysis on CBUS data\n",
    "CBUS_group1 = CBUS_new_df[CBUS_new_df[\"price\"] == 1][\"rating\"]\n",
    "CBUS_group2 = CBUS_new_df[CBUS_new_df[\"price\"] == 2][\"rating\"]\n",
    "CBUS_group3 = CBUS_new_df[CBUS_new_df[\"price\"] == 3][\"rating\"]\n",
    "CBUS_group4 = CBUS_new_df[CBUS_new_df[\"price\"] == 4][\"rating\"]\n",
    "stats.f_oneway(CBUS_group1, CBUS_group2, CBUS_group3, CBUS_group4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>price</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>948.000000</td>\n",
       "      <td>948.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.593882</td>\n",
       "      <td>3.901371</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.572739</td>\n",
       "      <td>0.506586</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>4.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            price      rating\n",
       "count  948.000000  948.000000\n",
       "mean     1.593882    3.901371\n",
       "std      0.572739    0.506586\n",
       "min      1.000000    2.000000\n",
       "25%      1.000000    3.500000\n",
       "50%      2.000000    4.000000\n",
       "75%      2.000000    4.500000\n",
       "max      4.000000    5.000000"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CBUS_new_df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "F_onewayResult(statistic=0.9257820803469385, pvalue=0.427699307999016)"
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#stat analysis on CIN data\n",
    "CIN_group1 = CIN_new_df[CIN_new_df[\"price\"] == 1][\"rating\"]\n",
    "CIN_group2 = CIN_new_df[CIN_new_df[\"price\"] == 2][\"rating\"]\n",
    "CIN_group3 = CIN_new_df[CIN_new_df[\"price\"] == 3][\"rating\"]\n",
    "CIN_group4 = CIN_new_df[CIN_new_df[\"price\"] == 4][\"rating\"]\n",
    "stats.f_oneway(CIN_group1, CIN_group2, CIN_group3, CIN_group4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>price</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>899.000000</td>\n",
       "      <td>899.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.585095</td>\n",
       "      <td>3.927141</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.606425</td>\n",
       "      <td>0.534425</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>4.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            price      rating\n",
       "count  899.000000  899.000000\n",
       "mean     1.585095    3.927141\n",
       "std      0.606425    0.534425\n",
       "min      1.000000    2.000000\n",
       "25%      1.000000    3.500000\n",
       "50%      2.000000    4.000000\n",
       "75%      2.000000    4.500000\n",
       "max      4.000000    5.000000"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CIN_new_df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "F_onewayResult(statistic=8.592692524105308, pvalue=1.2432522757620581e-05)"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#stat analysis on STL data\n",
    "STL_group1 = STL_new_df[STL_new_df[\"price\"] == 1][\"rating\"]\n",
    "STL_group2 = STL_new_df[STL_new_df[\"price\"] == 2][\"rating\"]\n",
    "STL_group3 = STL_new_df[STL_new_df[\"price\"] == 3][\"rating\"]\n",
    "STL_group4 = STL_new_df[STL_new_df[\"price\"] == 4][\"rating\"]\n",
    "stats.f_oneway(STL_group1, STL_group2, STL_group3, STL_group4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>price</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>960.000000</td>\n",
       "      <td>960.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.680208</td>\n",
       "      <td>3.939583</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.572960</td>\n",
       "      <td>0.485983</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>4.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            price      rating\n",
       "count  960.000000  960.000000\n",
       "mean     1.680208    3.939583\n",
       "std      0.572960    0.485983\n",
       "min      1.000000    2.500000\n",
       "25%      1.000000    3.500000\n",
       "50%      2.000000    4.000000\n",
       "75%      2.000000    4.500000\n",
       "max      4.000000    5.000000"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "STL_new_df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "F_onewayResult(statistic=22.855103601288977, pvalue=2.6352230480028464e-14)"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#stat analysis on PORT data\n",
    "PORT_group1 = PORT_new_df[PORT_new_df[\"price\"] == 1][\"rating\"]\n",
    "PORT_group2 = PORT_new_df[PORT_new_df[\"price\"] == 2][\"rating\"]\n",
    "PORT_group3 = PORT_new_df[PORT_new_df[\"price\"] == 3][\"rating\"]\n",
    "PORT_group4 = PORT_new_df[PORT_new_df[\"price\"] == 4][\"rating\"]\n",
    "stats.f_oneway(PORT_group1, PORT_group2, PORT_group3, PORT_group4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>price</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>984.000000</td>\n",
       "      <td>984.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.669715</td>\n",
       "      <td>4.174797</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.594702</td>\n",
       "      <td>0.369811</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>4.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            price      rating\n",
       "count  984.000000  984.000000\n",
       "mean     1.669715    4.174797\n",
       "std      0.594702    0.369811\n",
       "min      1.000000    3.000000\n",
       "25%      1.000000    4.000000\n",
       "50%      2.000000    4.000000\n",
       "75%      2.000000    4.500000\n",
       "max      4.000000    5.000000"
      ]
     },
     "execution_count": 145,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "PORT_new_df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "F_onewayResult(statistic=7.762723234231024, pvalue=4.027990181085553e-05)"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#stat analysis on DET data\n",
    "DET_group1 = DET_new_df[DET_new_df[\"price\"] == 1][\"rating\"]\n",
    "DET_group2 = DET_new_df[DET_new_df[\"price\"] == 2][\"rating\"]\n",
    "DET_group3 = DET_new_df[DET_new_df[\"price\"] == 3][\"rating\"]\n",
    "DET_group4 = DET_new_df[DET_new_df[\"price\"] == 4][\"rating\"]\n",
    "stats.f_oneway(DET_group1, DET_group2, DET_group3, DET_group4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>price</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>906.000000</td>\n",
       "      <td>906.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.587196</td>\n",
       "      <td>3.878035</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.588670</td>\n",
       "      <td>0.610020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>4.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            price      rating\n",
       "count  906.000000  906.000000\n",
       "mean     1.587196    3.878035\n",
       "std      0.588670    0.610020\n",
       "min      1.000000    1.500000\n",
       "25%      1.000000    3.500000\n",
       "50%      2.000000    4.000000\n",
       "75%      2.000000    4.500000\n",
       "max      4.000000    5.000000"
      ]
     },
     "execution_count": 146,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "DET_new_df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "F_onewayResult(statistic=2.3066246056782345, pvalue=0.07598046233268337)"
      ]
     },
     "execution_count": 149,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Perform the ANOVA on 4 star ratings\n",
    "fourstar = stats.f_oneway(cle_group4, CBUS_group4, CIN_group4, STL_group4, PORT_group4, DET_group4)\n",
    "fourstar"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "F_onewayResult(statistic=4.957443115933686, pvalue=0.0002550000641891156)"
      ]
     },
     "execution_count": 150,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Perform the ANOVA on 3 star ratings\n",
    "threestar = stats.f_oneway(cle_group3, CBUS_group3, CIN_group3, STL_group3, PORT_group3, DET_group3)\n",
    "threestar"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "F_onewayResult(statistic=25.463273385196732, pvalue=3.166352444067621e-25)"
      ]
     },
     "execution_count": 151,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Perform the ANOVA on 2 star ratings\n",
    "twostar = stats.f_oneway(cle_group2, CBUS_group2, CIN_group2, STL_group2, PORT_group2, DET_group2)\n",
    "twostar"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "F_onewayResult(statistic=29.515548898706992, pvalue=3.5322159527881413e-29)"
      ]
     },
     "execution_count": 182,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Perform the ANOVA on 1 star ratings\n",
    "onestar = stats.f_oneway(cle_group1, CBUS_group1, CIN_group1, STL_group1, PORT_group1, DET_group1)\n",
    "onestar"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x648 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#boxplot of all the Price Level 4 (more expensive) restaurants in each city vs Star Rating\n",
    "four_data = [cle_group4, CBUS_group4, CIN_group4, STL_group4, PORT_group4, DET_group4]\n",
    "plt.figure(figsize = (16, 9), dpi=72)\n",
    "plt.boxplot(four_data, labels=('CLE','CBUS','CIN','STL','PORT','DET'))\n",
    "plt.xlabel('City')\n",
    "plt.ylabel('Star rating')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x648 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#boxplot of all the Price Level 1 (less expensive) restaurants in each city vs Star Rating\n",
    "four_data = [cle_group1, CBUS_group1, CIN_group1, STL_group1, PORT_group1, DET_group1]\n",
    "plt.figure(figsize = (16, 9), dpi=72)\n",
    "plt.boxplot(four_data, labels=('CLE','CBUS','CIN','STL','PORT','DET'))\n",
    "plt.xlabel('City')\n",
    "plt.ylabel('Star rating')\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
